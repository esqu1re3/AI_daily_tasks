#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø –≤ AI Daily Tasks
–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É groups –∏ –ø–æ–ª–µ group_id –≤ —Ç–∞–±–ª–∏—Ü—É users
"""

import sqlite3
from pathlib import Path
from datetime import datetime
import logging
import sys
import secrets

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

DB_PATH = Path("data/reports_backup.sqlite")

def create_groups_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã groups –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–∞–Ω–¥/–≥—Ä—É–ø–ø"""
    conn = None
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
        if not DB_PATH.exists():
            logger.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ migrations/init_users.py")
            return False
        
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã groups
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='groups'")
        table_exists = cursor.fetchone()
        
        if table_exists:
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ groups —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É groups
            logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã groups...")
            cursor.execute("""
            CREATE TABLE groups (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                admin_id TEXT NOT NULL,
                admin_username TEXT,
                admin_full_name TEXT,
                activation_token TEXT UNIQUE NOT NULL,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                morning_hour INTEGER DEFAULT 17,
                morning_minute INTEGER DEFAULT 30,
                timezone TEXT DEFAULT 'Asia/Bishkek',
                days_of_week TEXT DEFAULT '0,1,2,3,4' NOT NULL
            )
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã groups
            cursor.execute("CREATE INDEX idx_groups_admin_id ON groups(admin_id)")
            cursor.execute("CREATE UNIQUE INDEX idx_groups_activation_token ON groups(activation_token)")
            cursor.execute("CREATE INDEX idx_groups_is_active ON groups(is_active)")
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ groups —Å–æ–∑–¥–∞–Ω–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è group_id –≤ —Ç–∞–±–ª–∏—Ü–µ users
        cursor.execute("PRAGMA table_info(users)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'group_id' not in columns:
            logger.info("üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è group_id –≤ —Ç–∞–±–ª–∏—Ü—É users...")
            cursor.execute("ALTER TABLE users ADD COLUMN group_id INTEGER REFERENCES groups(id)")
            cursor.execute("CREATE INDEX idx_users_group_id ON users(group_id)")
            logger.info("‚úÖ –ü–æ–ª–µ group_id –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É users")
        else:
            logger.info("‚úÖ –ü–æ–ª–µ group_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users")
        
        conn.commit()
        return True
        
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
        if conn:
            conn.rollback()
        return False
    finally:
        if conn:
            conn.close()

def create_default_group():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
    # –û–¢–ö–õ–Æ–ß–ï–ù–û: –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É "–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    logger.info("üí° –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –≤–∫–ª–∞–¥–∫–∞ '–ì—Ä—É–ø–ø—ã' ‚Üí '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É'")
    return True

def print_migration_results():
    """–í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
            print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö
            cursor.execute("SELECT COUNT(*) FROM groups")
            groups_count = cursor.fetchone()[0]
            print(f"üìä –ì—Ä—É–ø–ø –≤ —Å–∏—Å—Ç–µ–º–µ: {groups_count}")
            
            if groups_count > 0:
                cursor.execute("SELECT id, name, admin_full_name, activation_token FROM groups")
                groups = cursor.fetchall()
                print(f"\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã:")
                for group in groups:
                    token_preview = group[3][:8] + "..." if group[3] else "None"
                    print(f"  ID {group[0]}: {group[1]} (–ê–¥–º–∏–Ω: {group[2] or 'N/A'}, –¢–æ–∫–µ–Ω: {token_preview})")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            cursor.execute("SELECT COUNT(*) FROM users WHERE is_verified = 1")
            verified_users = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM users WHERE is_verified = 1 AND group_id IS NOT NULL")
            users_with_group = cursor.fetchone()[0]
            
            print(f"\nüë• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {verified_users}")
            print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥—Ä—É–ø–ø–æ–π: {users_with_group}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
            print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã groups:")
            cursor.execute("PRAGMA table_info(groups)")
            for col in cursor.fetchall():
                print(f"  {col[1]:<20} {col[2]:<15} {'NOT NULL' if col[3] else 'NULL'}")
                
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    try:
        print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É groups –∏ –æ–±–Ω–æ–≤–ª—è–µ–º users
        if not create_groups_table():
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã groups")
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not create_default_group():
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            sys.exit(1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print_migration_results()
        
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥—Ä—É–ø–ø —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
        print("   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã")
        print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã")
        print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –î–æ–±–∞–≤—å—Ç–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏")
        print("   2. –û–±–Ω–æ–≤–∏—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏")
        print("   3. –û–±–Ω–æ–≤–∏—Ç–µ –ª–æ–≥–∏–∫—É –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏")
        print("   4. –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º")
        
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 