import os
from pathlib import Path
import sqlite3
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

DB_PATH = Path("data/reports_backup.sqlite")

def remove_db_file():
    if DB_PATH.exists():
        try:
            DB_PATH.unlink()
            logger.info(f"‚úÖ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {DB_PATH} —É–¥–∞–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ë–î: {e}")
            return False
    else:
        logger.info(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ)")
    return True

def create_empty_users_table():
    try:
        DB_PATH.parent.mkdir(parents=True, exist_ok=True)
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT UNIQUE,
            username TEXT UNIQUE,
            full_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            is_verified BOOLEAN DEFAULT 0,
            is_group_member BOOLEAN DEFAULT 1,
            last_response TEXT,
            has_responded_today BOOLEAN DEFAULT 0,
            activation_token TEXT
        )
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ activation_token
        cursor.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_activation_token ON users(activation_token) WHERE activation_token IS NOT NULL")
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ü—É—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π (–≤–∫–ª—é—á–∞—è activation_token)")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users: {e}")
        return False

def main():
    print("üîÑ –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö AI Daily Tasks...")
    print("‚ö†Ô∏è  –£–¥–∞–ª—è—é –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    if remove_db_file():
        if create_empty_users_table():
            print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print("\nüìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users –æ–±–Ω–æ–≤–ª–µ–Ω–∞:")
            print("   - user_id: nullable (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)")
            print("   - username: nullable (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)")
            print("   - is_verified: –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
            print("   - activation_token: —Ç–æ–∫–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫–∏")
            print("   - is_group_member: —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã users.")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == "__main__":
    main() 
