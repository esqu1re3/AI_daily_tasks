#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö AI Daily Tasks
–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—É—é –±–∞–∑—É –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–æ –≤—Å–µ–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
"""
import sys
import os
from pathlib import Path
import sqlite3

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def remove_db_file():
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    db_paths = [
        project_root / "data" / "reports_backup.sqlite",
        project_root / "reports_backup.sqlite",
        project_root / "app.db"
    ]
    
    removed_files = []
    for db_path in db_paths:
        if db_path.exists():
            try:
                db_path.unlink()
                removed_files.append(str(db_path))
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {db_path}: {e}")
    
    if not removed_files:
        print("‚ÑπÔ∏è –§–∞–π–ª—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return len(removed_files) > 0

def create_database_structure():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        from app.core.database import engine, Base
        from app.models.user import User
        from app.models.user_response import UserResponse  
        from app.models.group import Group
        
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(bind=engine)
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
        return False

def create_default_group():
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        from app.core.database import SessionLocal
        from app.models.group import Group
        from app.config import settings
        
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥—Ä—É–ø–ø—ã
        existing_groups = db.query(Group).count()
        if existing_groups > 0:
            print("‚ÑπÔ∏è –ì—Ä—É–ø–ø—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            db.close()
            return True
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        admin_id = getattr(settings, 'ADMIN_ID', None)
        if not admin_id:
            print("‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env, —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∞–¥–º–∏–Ω–æ–º")
            admin_id = "000000000"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
        
        default_group = Group(
            name="–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
            description="–ì—Ä—É–ø–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            admin_id=admin_id,
            admin_username="admin",
            admin_full_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            morning_hour=17,
            morning_minute=30,
            timezone="Asia/Bishkek"
        )
        
        db.add(default_group)
        db.commit()
        
        group_id = default_group.id
        activation_token = default_group.activation_token
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (ID: {group_id})")
        print(f"üîó –¢–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_token}")
        
        db.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        return False

def print_database_info():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app.core.database import SessionLocal
        from app.models.user import User
        from app.models.user_response import UserResponse
        from app.models.group import Group
        
        db = SessionLocal()
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
        users_count = db.query(User).count()
        responses_count = db.query(UserResponse).count()
        groups_count = db.query(Group).count()
        
        print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}")
        print(f"   üí¨ –û—Ç–≤–µ—Ç—ã: {responses_count}")
        print(f"   üè¢ –ì—Ä—É–ø–ø—ã: {groups_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
        if groups_count > 0:
            print("\nüè¢ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:")
            groups = db.query(Group).all()
            for group in groups:
                print(f"   ‚Ä¢ {group.name} (ID: {group.id})")
                print(f"     –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {group.admin_full_name or group.admin_username or group.admin_id}")
                print(f"     –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {group.morning_hour:02d}:{group.morning_minute:02d} ({group.timezone})")
                print(f"     –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: https://t.me/YOUR_BOT?start={group.activation_token}")
        
        db.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")

def verify_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db_path = project_root / "data" / "reports_backup.sqlite"
        if not db_path.exists():
            print("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [row[0] for row in cursor.fetchall()]
        
        expected_tables = ['users', 'groups', 'user_responses']
        missing_tables = set(expected_tables) - set(tables)
        
        if missing_tables:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
            conn.close()
            return False
        
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        for table in expected_tables:
            cursor.execute(f"PRAGMA table_info({table});")
            columns = cursor.fetchall()
            print(f"   üìã {table}: {len(columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ AI Daily Tasks - –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    print("‚ö†Ô∏è –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    
    print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ë–î
    print("\n1Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    remove_db_file()
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if not create_database_structure():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î")
        sys.exit(1)
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
    if not create_default_group():
        print("‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    if not verify_database():
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ—à–ª–∞")
        sys.exit(1)
    
    # –®–∞–≥ 5: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print_database_info()
    
    print("\n‚úÖ –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìù –ß—Ç–æ –¥–∞–ª—å—à–µ:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: python run_all.py")
    print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:8501")
    
    db_path = project_root / "data" / "reports_backup.sqlite"
    print(f"\nüìÅ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")

if __name__ == "__main__":
    main() 