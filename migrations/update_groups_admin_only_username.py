#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø - —Ç–æ–ª—å–∫–æ username
–£–¥–∞–ª—è–µ–º admin_id –∏ admin_full_name, –¥–µ–ª–∞–µ–º admin_username –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
"""

import sqlite3
import sys
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
BASE_DIR = Path(__file__).resolve().parent.parent
DB_PATH = BASE_DIR / "data" / "reports_backup.sqlite"


def run_migration():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø")
    
    if not DB_PATH.exists():
        logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")
        return False
    
    try:
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã groups
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='groups';")
        if not cursor.fetchone():
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ groups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞")
            conn.close()
            return True
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(groups);")
        columns = {row[1]: row for row in cursor.fetchall()}
        
        has_admin_id = 'admin_id' in columns
        has_admin_full_name = 'admin_full_name' in columns
        has_admin_username = 'admin_username' in columns
        
        logger.info(f"üìä –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: admin_id={has_admin_id}, admin_username={has_admin_username}, admin_full_name={has_admin_full_name}")
        
        if not has_admin_id and not has_admin_full_name and has_admin_username:
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            conn.close()
            return True
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥—Ä—É–ø–ø—ã —Å –ø—É—Å—Ç—ã–º admin_username
        cursor.execute("SELECT COUNT(*) FROM groups WHERE admin_username IS NULL OR admin_username = '';")
        groups_without_username = cursor.fetchone()[0]
        
        if groups_without_username > 0:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {groups_without_username} –≥—Ä—É–ø–ø –±–µ–∑ admin_username")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            cursor.execute("""
                UPDATE groups 
                SET admin_username = 'admin_' || id 
                WHERE admin_username IS NULL OR admin_username = ''
            """)
            logger.info(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ username –¥–ª—è {groups_without_username} –≥—Ä—É–ø–ø")
        
        # 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        cursor.execute("""
            CREATE TABLE groups_new (
                id INTEGER PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                description TEXT,
                admin_username VARCHAR NOT NULL,
                activation_token VARCHAR UNIQUE NOT NULL,
                is_active BOOLEAN DEFAULT 1,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                morning_hour INTEGER DEFAULT 17,
                morning_minute INTEGER DEFAULT 30,
                timezone VARCHAR DEFAULT 'Asia/Bishkek'
            );
        """)
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ groups_new")
        
        # 5. –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –Ω–æ–≤—É—é (—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è)
        cursor.execute("""
            INSERT INTO groups_new (
                id, name, description, admin_username, activation_token, 
                is_active, created_at, morning_hour, morning_minute, timezone
            )
            SELECT 
                id, name, description, 
                COALESCE(admin_username, 'admin_' || id) as admin_username,
                activation_token, is_active, created_at, 
                morning_hour, morning_minute, timezone
            FROM groups;
        """)
        
        migrated_count = cursor.rowcount
        logger.info(f"üì§ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –≥—Ä—É–ø–ø –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
        
        # 6. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
        cursor.execute("DROP TABLE groups;")
        cursor.execute("ALTER TABLE groups_new RENAME TO groups;")
        logger.info("üîÑ –ó–∞–º–µ–Ω–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞ –Ω–æ–≤—É—é")
        
        # 7. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_groups_activation_token ON groups(activation_token);")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_groups_admin_username ON groups(admin_username);")
        logger.info("üìä –°–æ–∑–¥–∞–Ω—ã –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã")
        
        conn.commit()
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("SELECT COUNT(*) FROM groups;")
        total_groups = cursor.fetchone()[0]
        
        cursor.execute("PRAGMA table_info(groups);")
        new_columns = [row[1] for row in cursor.fetchall()]
        
        logger.info(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:")
        logger.info(f"   ‚Ä¢ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {total_groups}")
        logger.info(f"   ‚Ä¢ –ü–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã: {', '.join(new_columns)}")
        logger.info(f"   ‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –ø–æ–ª—è: admin_id, admin_full_name")
        logger.info(f"   ‚Ä¢ admin_username —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ")
        
        conn.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        try:
            conn.rollback()
            conn.close()
        except:
            pass
        return False


def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏")
    
    try:
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(groups);")
        columns = {row[1]: row for row in cursor.fetchall()}
        
        required_fields = ['id', 'name', 'admin_username', 'activation_token']
        removed_fields = ['admin_id', 'admin_full_name']
        
        success = True
        for field in required_fields:
            if field not in columns:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                success = False
            else:
                logger.info(f"‚úÖ –ü–æ–ª–µ {field}: OK")
        
        for field in removed_fields:
            if field in columns:
                logger.error(f"‚ùå –ü–æ–ª–µ {field} –Ω–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ")
                success = False
            else:
                logger.info(f"‚úÖ –ü–æ–ª–µ {field}: —É–¥–∞–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ admin_username –Ω–µ nullable
        admin_username_info = columns.get('admin_username')
        if admin_username_info and admin_username_info[3] == 0:  # notnull = 0
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª–µ admin_username –º–æ–∂–µ—Ç –±—ã—Ç—å NULL (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è SQLite)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM groups WHERE admin_username IS NULL OR admin_username = '';")
        null_usernames = cursor.fetchone()[0]
        
        if null_usernames > 0:
            logger.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {null_usernames} –≥—Ä—É–ø–ø –±–µ–∑ admin_username")
            success = False
        else:
            logger.info("‚úÖ –í—Å–µ –≥—Ä—É–ø–ø—ã –∏–º–µ—é—Ç admin_username")
        
        conn.close()
        
        if success:
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
        else:
            logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø")
    print("=" * 60)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("üìù –ß—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ:")
    print("   ‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –ø–æ–ª—è admin_id –∏ admin_full_name –∏–∑ —Ç–∞–±–ª–∏—Ü—ã groups")
    print("   ‚Ä¢ admin_username —Å—Ç–∞–Ω–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º")
    print("   ‚Ä¢ –ì—Ä—É–ø–ø—ã –±–µ–∑ username –ø–æ–ª—É—á–∞—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    print()
    
    confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ")
    if confirm.lower() not in ['y', 'yes', '–¥–∞']:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_path = DB_PATH.with_suffix('.sqlite.backup_groups_admin')
    try:
        import shutil
        shutil.copy2(DB_PATH, backup_path)
        logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
        confirm_without_backup = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏? (y/N): ")
        if confirm_without_backup.lower() not in ['y', 'yes', '–¥–∞']:
            return 1
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if run_migration():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if verify_migration():
            print("\n" + "=" * 60)
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("‚úÖ –¢–µ–ø–µ—Ä—å –≥—Ä—É–ø–ø—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–ª—å–∫–æ admin_username")
            print("=" * 60)
            return 0
        else:
            print("\n" + "=" * 60)
            print("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
            print("=" * 60)
            return 0
    else:
        print("\n" + "=" * 60)
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        if backup_path.exists():
            print(f"üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_path}")
        print("=" * 60)
        return 1


if __name__ == "__main__":
    sys.exit(main()) 