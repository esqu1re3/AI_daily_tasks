import sqlite3
from pathlib import Path
from datetime import datetime
import logging
import sys

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

DB_PATH = Path("data/reports_backup.sqlite")

def create_new_users_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    conn = None
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        DB_PATH.parent.mkdir(parents=True, exist_ok=True)
        
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –µ—ë —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
        table_exists = cursor.fetchone()
        
        if table_exists:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
            cursor.execute("PRAGMA table_info(users)")
            columns = [column[1] for column in cursor.fetchall()]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_group_member –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'is_group_member' not in columns:
                logger.info("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ is_group_member –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É")
                cursor.execute("ALTER TABLE users ADD COLUMN is_group_member BOOLEAN DEFAULT 1")
                conn.commit()
                logger.info("‚úÖ –ü–æ–ª–µ is_group_member –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ activation_token –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'activation_token' not in columns:
                logger.info("–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ activation_token –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É")
                cursor.execute("ALTER TABLE users ADD COLUMN activation_token TEXT")
                conn.commit()
                logger.info("‚úÖ –ü–æ–ª–µ activation_token –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è username (—É–±–∏—Ä–∞–µ–º NOT NULL, –µ—Å–ª–∏ –µ—Å—Ç—å)
            # –í SQLite –Ω–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑–º–µ–Ω–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –Ω–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            cursor.execute("SELECT sql FROM sqlite_master WHERE type='table' AND name='users'")
            table_schema = cursor.fetchone()[0]
            
            if 'username TEXT UNIQUE NOT NULL' in table_schema:
                logger.info("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π username")
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute("""
                CREATE TABLE users_new (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT UNIQUE,
                    username TEXT UNIQUE,
                    full_name TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    is_active BOOLEAN DEFAULT 1,
                    is_verified BOOLEAN DEFAULT 0,
                    is_group_member BOOLEAN DEFAULT 1,
                    last_response TEXT,
                    has_responded_today BOOLEAN DEFAULT 0,
                    activation_token TEXT
                )
                """)
                
                # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                cursor.execute("""
                INSERT INTO users_new 
                SELECT id, user_id, username, full_name, created_at, is_active, is_verified, 
                       COALESCE(is_group_member, 1), last_response, has_responded_today, activation_token
                FROM users
                """)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute("DROP TABLE users")
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute("ALTER TABLE users_new RENAME TO users")
                
                conn.commit()
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
            else:
                logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            cursor.execute("""
            CREATE TABLE users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT UNIQUE,
                username TEXT UNIQUE,
                full_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT 1,
                is_verified BOOLEAN DEFAULT 0,
                is_group_member BOOLEAN DEFAULT 1,
                last_response TEXT,
                has_responded_today BOOLEAN DEFAULT 0,
                activation_token TEXT
            )
            """)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ activation_token
            cursor.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_activation_token ON users(activation_token) WHERE activation_token IS NOT NULL")
            
            conn.commit()
            logger.info("‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞")
        
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
        raise
    finally:
        if conn:
            conn.close()

def print_table_structure():
    """–í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
            cursor.execute("PRAGMA table_info(users)")
            for col in cursor.fetchall():
                print(f"  {col[1]:<20} {col[2]:<15} {'NOT NULL' if col[3] else 'NULL'}")
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

if __name__ == "__main__":
    try:
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI Daily Tasks...")
        
        # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        create_new_users_table()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print_table_structure()
        
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìù –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:")
        print("   ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        print("   ‚Ä¢ Username –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ is_group_member")
        print("   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python -m app.main")
        print("   2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å—Å—ã–ª–∫—É: https://t.me/aidailytasksBot?start=group_activation")
        print("   3. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ")
        
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
