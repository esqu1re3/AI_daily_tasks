import sqlite3
import pandas as pd
from datetime import datetime, date
from pathlib import Path
import os
import streamlit as st
from typing import Tuple, Optional, List  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã

def load_data() -> pd.DataFrame:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        BASE_DIR = Path(__file__).resolve().parent.parent
        DB_PATH = BASE_DIR / "data" / "reports_backup.sqlite"
        
        if not DB_PATH.exists():
            st.error("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return pd.DataFrame()
            
        conn = sqlite3.connect(str(DB_PATH))  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Path –≤ —Å—Ç—Ä–æ–∫—É
        users = pd.read_sql("SELECT * FROM users", conn)
        reports = pd.read_sql("SELECT * FROM reports", conn)
        return reports.merge(users, left_on="user_id", right_on="id")
    except sqlite3.Error as e:
        st.error(f"–û—à–∏–±–∫–∞ SQLite: {str(e)}")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return pd.DataFrame()
    finally:
        if 'conn' in locals():
            conn.close()

def apply_filters(
    df: pd.DataFrame,
    date_col: str = "created_at",
    user_col: str = "name",
    content_col: str = "content"
) -> Tuple[pd.DataFrame, Optional[date], Optional[str], Optional[str]]:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    st.sidebar.header("üîé –§–∏–ª—å—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    selected_date = st.sidebar.date_input(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
        value=None
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    unique_users = ["–í—Å–µ"] + sorted(df[user_col].dropna().unique().tolist())
    selected_user = st.sidebar.selectbox(
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
        unique_users
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    keyword = st.sidebar.text_input("–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_df = df.copy()
    
    if selected_date:
        filtered_df[date_col] = pd.to_datetime(filtered_df[date_col]).dt.date
        filtered_df = filtered_df[filtered_df[date_col] == selected_date]
    
    if selected_user != "–í—Å–µ":
        filtered_df = filtered_df[filtered_df[user_col] == selected_user]
    
    if keyword:
        filtered_df = filtered_df[
            filtered_df[content_col].str.contains(keyword, case=False, na=False)
        ]
    
    return filtered_df, selected_date, selected_user, keyword

def display_filter_stats(
    df: pd.DataFrame,
    filtered_df: pd.DataFrame,
    selected_date: Optional[date],
    selected_user: Optional[str],
    keyword: Optional[str]
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    stats = []
    if selected_date:
        stats.append(f"üìÖ –î–∞—Ç–∞: {selected_date}")
    if selected_user and selected_user != "–í—Å–µ":
        stats.append(f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {selected_user}")
    if keyword:
        stats.append(f"üîç –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'")
    
    if stats:
        st.info(
            f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(filtered_df)} –∏–∑ {len(df)}. –§–∏–ª—å—Ç—Ä—ã: {', '.join(stats)}"
        )

def get_report_types_filter(df: pd.DataFrame) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø—ã –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞"""
    types = df["type"].dropna().unique().tolist()
    return ["–í—Å–µ"] + sorted(types)

def apply_report_type_filter(
    df: pd.DataFrame,
    report_types: List[str],
    selected_type: str = "–í—Å–µ"
) -> pd.DataFrame:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —Ç–∏–ø—É –æ—Ç—á–µ—Ç–∞"""
    if selected_type == "–í—Å–µ":
        return df
    return df[df["type"] == selected_type.lower()]