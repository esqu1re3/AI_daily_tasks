import streamlit as st
import pandas as pd
import sqlite3
import time
from datetime import datetime
from pathlib import Path
import logging
import requests
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import streamlit.components.v1 as components
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI Daily Tasks ‚Äî –ê–¥–º–∏–Ω–∫–∞",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
st.markdown("""
<style>
    /* –ò–º–ø–æ—Ä—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    /* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ */
    :root {
        --primary-color: #667eea;
        --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --secondary-color: #f093fb;
        --success-color: #4ade80;
        --warning-color: #fbbf24;
        --error-color: #f87171;
        --background-color: #0f1419;
        --surface-color: #1a1f2e;
        --card-color: #242b3d;
        --text-primary: #ffffff;
        --text-secondary: #94a3b8;
        --border-color: #334155;
        --shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        --radius: 12px;
    }
    
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .stApp {
        background: var(--background-color);
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    /* –°–∫—Ä—ã—Ç–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Streamlit */
    #MainMenu, footer, header {visibility: hidden;}
    .stDeployButton {display: none;}
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    .main-title {
        background: var(--primary-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-size: 2.5rem;
        font-weight: 700;
        text-align: center;
        margin-bottom: 0.5rem;
        line-height: 1.2;
    }
    
    .subtitle {
        color: var(--text-secondary);
        text-align: center;
        font-size: 1.1rem;
        margin-bottom: 2rem;
        font-weight: 400;
    }
    
    /* –ö–∞—Ä—Ç–æ—á–∫–∏ */
    .metric-card {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: var(--radius);
        padding: 1.5rem;
        margin: 0.5rem 0;
        box-shadow: var(--shadow);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .metric-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
        border-color: var(--primary-color);
    }
    
    .metric-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: var(--primary-gradient);
    }
    
    /* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */
    .info-panel {
        background: linear-gradient(135deg, var(--card-color) 0%, #2d3748 100%);
        border: 1px solid var(--border-color);
        border-radius: var(--radius);
        padding: 2rem;
        margin: 1rem 0;
        position: relative;
        overflow: hidden;
    }
    
    .info-panel::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--primary-gradient);
    }
    
    .activation-link {
        background: var(--surface-color);
        border: 1px solid var(--primary-color);
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
        font-family: 'Fira Code', monospace;
        font-size: 0.9rem;
        color: var(--primary-color);
        word-break: break-all;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        background: var(--primary-gradient);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1.5rem;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-1px);
        box-shadow: 0 6px 16px rgba(102, 126, 234, 0.4);
    }
    
    /* –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º */
    .stTextInput > div > div > input,
    .stTextArea > div > div > textarea,
    .stSelectbox > div > div {
        background: var(--surface-color) !important;
        border: 1px solid var(--border-color) !important;
        border-radius: 8px !important;
        color: var(--text-primary) !important;
        font-size: 0.95rem !important;
    }
    
    .stTextInput > div > div > input:focus,
    .stTextArea > div > div > textarea:focus {
        border-color: var(--primary-color) !important;
        box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2) !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä—ã */
    .streamlit-expanderHeader {
        background: var(--surface-color) !important;
        border: 1px solid var(--border-color) !important;
        border-radius: 8px !important;
        color: var(--text-primary) !important;
        font-weight: 500 !important;
    }
    
    .streamlit-expanderHeader:hover {
        border-color: var(--primary-color) !important;
        background: linear-gradient(135deg, var(--surface-color) 0%, var(--card-color) 100%) !important;
    }
    
    .streamlit-expanderContent {
        background: var(--card-color) !important;
        border: 1px solid var(--border-color) !important;
        border-top: none !important;
        border-radius: 0 0 8px 8px !important;
        padding: 1rem !important;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */
    .stButton[data-testid="baseButton-secondary"] > button {
        background: var(--surface-color) !important;
        color: var(--text-primary) !important;
        border: 1px solid var(--border-color) !important;
        padding: 0.4rem 0.8rem !important;
        font-size: 0.9rem !important;
        min-height: 2.5rem !important;
    }
    
    .stButton[data-testid="baseButton-secondary"] > button:hover {
        border-color: var(--primary-color) !important;
        background: var(--primary-color) !important;
        color: white !important;
    }
    
    /* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */
    .user-card {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: var(--radius);
        padding: 1.5rem;
        margin: 0.5rem 0;
        transition: all 0.3s ease;
        position: relative;
    }
    
    .user-card:hover {
        border-color: var(--primary-color);
        box-shadow: var(--shadow);
    }
    
    .user-avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background: var(--primary-gradient);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 1.2rem;
        margin-right: 1rem;
    }
    
    .status-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    .status-active {
        background: rgba(74, 222, 128, 0.2);
        color: var(--success-color);
        border: 1px solid var(--success-color);
    }
    
    .status-inactive {
        background: rgba(248, 113, 113, 0.2);
        color: var(--error-color);
        border: 1px solid var(--error-color);
    }
    
    .status-pending {
        background: rgba(251, 191, 36, 0.2);
        color: var(--warning-color);
        border: 1px solid var(--warning-color);
    }
    
    /* –í–∫–ª–∞–¥–∫–∏ */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
        background: var(--surface-color);
        border-radius: var(--radius);
        padding: 0.5rem;
    }
    
    .stTabs [data-baseweb="tab"] {
        background: transparent;
        border-radius: 8px;
        color: var(--text-secondary);
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .stTabs [aria-selected="true"] {
        background: var(--primary-gradient) !important;
        color: white !important;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    .stMetric {
        background: var(--card-color);
        border: 1px solid var(--border-color);
        border-radius: var(--radius);
        padding: 1rem;
        text-align: center;
    }
    
    .stMetric > div > div {
        color: var(--text-primary);
    }
    
    /* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */
    .sidebar-content {
        background: var(--surface-color);
        border-radius: var(--radius);
        padding: 1.5rem;
        margin: 1rem 0;
        border: 1px solid var(--border-color);
    }
    
    /* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */
    .stProgress > div > div {
        background: var(--primary-gradient);
        border-radius: 10px;
    }
    
    /* –î–∞—Ç–∞—Ñ—Ä–µ–π–º—ã */
    .stDataFrame {
        border-radius: var(--radius);
        overflow: hidden;
    }
    
    /* –°–µ–ª–µ–∫—Ç–±–æ–∫—Å—ã –∏ –∏–Ω–ø—É—Ç—ã */
    .stSelectbox > div > div {
        background: var(--surface-color);
        border: 1px solid var(--border-color);
        border-radius: 8px;
    }
    
    /* –°–ø–∏–Ω–Ω–µ—Ä */
    .stSpinner > div {
        border-top-color: var(--primary-color) !important;
    }
    
    /* –ß–µ–∫–±–æ–∫—Å—ã */
    .stCheckbox > label {
        color: var(--text-primary) !important;
        font-weight: 500 !important;
    }
    
    .stCheckbox input[type="checkbox"] {
        accent-color: var(--primary-color) !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
    @media (max-width: 768px) {
        .main-title {
            font-size: 2rem;
        }
        
        .metric-card, .user-card {
            margin: 0.25rem 0;
            padding: 1rem;
        }
        
        .info-panel {
            padding: 1.5rem;
        }
        
        .stButton > button {
            padding: 0.4rem 1rem;
            font-size: 0.9rem;
        }
    }
    
    /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
    .stAlert {
        border-radius: var(--radius) !important;
        border: 1px solid var(--border-color) !important;
        animation: slideInDown 0.4s ease-out !important;
        transition: all 0.3s ease !important;
        min-width: 300px !important;
        max-width: 450px !important;
        width: fit-content !important;
        min-height: 50px !important;
        max-height: 120px !important;
        overflow: visible !important;
        position: relative !important;
        z-index: 1000 !important;
        line-height: 1.5 !important;
        font-size: 0.9rem !important;
        padding: 14px 18px !important;
        margin: 8px 0 !important;
        display: block !important;
        box-shadow: var(--shadow) !important;
    }
    
    .stAlert[data-testid="stAlert"] {
        min-width: 300px !important;
        max-width: 450px !important;
        min-height: 50px !important;
        max-height: 120px !important;
        overflow: visible !important;
    }
    
    .stAlert > div,
    .stAlert p {
        display: block !important;
        overflow: visible !important;
        text-overflow: unset !important;
        max-width: 100% !important;
        line-height: 1.5 !important;
        margin: 0 !important;
        padding: 0 !important;
        word-wrap: break-word !important;
        white-space: normal !important;
    }
    
    .stSuccess {
        background: linear-gradient(135deg, rgba(74, 222, 128, 0.1) 0%, rgba(34, 197, 94, 0.05) 100%);
        border-left: 4px solid var(--success-color);
    }
    
    .stError {
        background: linear-gradient(135deg, rgba(248, 113, 113, 0.1) 0%, rgba(239, 68, 68, 0.05) 100%);
        border-left: 4px solid var(--error-color);
    }
    
    .stWarning {
        background: linear-gradient(135deg, rgba(251, 191, 36, 0.1) 0%, rgba(245, 158, 11, 0.05) 100%);
        border-left: 4px solid var(--warning-color);
    }
    
    .stInfo {
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(99, 102, 241, 0.05) 100%);
        border-left: 4px solid var(--primary-color);
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */
    @keyframes slideInDown {
        from {
            opacity: 0;
            transform: translateY(-30px) scale(0.95);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }
    
    @keyframes slideOutUp {
        from {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
        to {
            opacity: 0;
            transform: translateY(-30px) scale(0.95);
        }
    }
    
    .notification-enter {
        animation: slideInDown 0.4s ease-out;
    }
    
    .notification-exit {
        animation: slideOutUp 0.3s ease-in;
    }
    
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .metric-card, .user-card, .info-panel {
        animation: fadeIn 0.5s ease-out;
    }
    
    /* –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ */
    .icon {
        width: 24px;
        height: 24px;
        display: inline-block;
        margin-right: 8px;
        vertical-align: middle;
    }
</style>
""", unsafe_allow_html=True)

DAYS_OF_WEEK_LABELS = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
DAYS_OF_WEEK_MAP = {i: label for i, label in enumerate(DAYS_OF_WEEK_LABELS)}

BISHKEK_TZ = pytz.timezone('Asia/Bishkek')

def copy_to_clipboard_button(text: str, button_label: str = "üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"):
    """Render a copy button that shows a short confirmation message after copying."""
    components.html(
        f"""
        <button style=\"background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);color:#fff;border:none;border-radius:8px;padding:0.4rem 1.2rem;font-weight:500;cursor:pointer;position:relative;overflow:hidden;\"
                onclick=\"
                    navigator.clipboard.writeText('{text}');
                    const btn=this;
                    const original=btn.innerHTML;
                    btn.innerHTML='‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                    setTimeout(()=>btn.innerHTML=original,1500);
                \">
            {button_label}
        </button>
        """,
        height=40,
    )

def to_bishkek(dt):
    if not dt:
        return ''
    if isinstance(dt, str):
        dt = pd.to_datetime(dt, utc=True)
    elif not getattr(dt, 'tzinfo', None):
        dt = pd.Timestamp(dt, tz='UTC')
    return dt.tz_convert(BISHKEK_TZ).strftime('%d.%m.%Y %H:%M')

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
BASE_DIR = Path(__file__).resolve().parent.parent
DB_PATH = BASE_DIR / "data" / "reports_backup.sqlite"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    try:
        DB_PATH.parent.mkdir(parents=True, exist_ok=True)
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT UNIQUE,
            username TEXT UNIQUE,
            full_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            is_verified BOOLEAN DEFAULT 0,
            is_group_member BOOLEAN DEFAULT 1,
            last_response TEXT,
            has_responded_today BOOLEAN DEFAULT 0,
            activation_token TEXT UNIQUE
        )
        """)
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def load_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(str(DB_PATH))
        df = pd.read_sql_query("SELECT * FROM users ORDER BY created_at DESC", conn)
        conn.close()
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return pd.DataFrame()

def update_user_status(user_id, is_active):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute(
            "UPDATE users SET is_active = ? WHERE id = ?",
            (is_active, user_id)
        )
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def delete_user(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def get_user_responses_history(user_id, limit=20):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.get(
            f"http://localhost:8000/users/{user_id}/responses?limit={limit}",
            timeout=10
        )
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {response.status_code}")
            return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return []

def reset_daily_responses_and_send_messages():
    """–°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å –ò –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
    try:
        # 1. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –ë–î
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET has_responded_today = 0, last_response = NULL")
        conn.commit()
        conn.close()
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
        import requests
        try:
            response = requests.post("http://localhost:8000/users/send-repeat-questions", timeout=30)
            if response.status_code == 200:
                result = response.json()
                success_count = result.get('success_count', 0)
                total_count = result.get('total_count', 0)
                errors = result.get('errors', [])
                
                if success_count > 0:
                    logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {success_count}/{total_count}")
                    return {"success": True, "message": f"–û—Ç–≤–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º ({success_count}/{total_count})", "details": result}
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    return {"success": True, "message": "–û—Ç–≤–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã, –Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)", "details": result}
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {response.status_code}")
                return {"success": True, "message": "–û—Ç–≤–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—à–∏–±–∫–∞ API)", "details": None}
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return {"success": True, "message": "–û—Ç–≤–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)", "details": None}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤: {e}", "details": None}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
if not init_database():
    st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    st.stop()

# ======================
# –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–°
# ======================

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
st.markdown('<h1 class="main-title">üöÄ AI Daily Tasks</h1>', unsafe_allow_html=True)
st.markdown('<p class="subtitle">–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π –∏ —Å–±–æ—Ä–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö –ø–ª–∞–Ω–æ–≤</p>', unsafe_allow_html=True)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
st.markdown("""
<div class="info-panel">
    <h3 style="color: var(--text-primary); margin-top: 0;">üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã</h3>
    <div class="activation-link">
        https://t.me/aidailytasksBot?start=group_activation
    </div>
    <p style="color: var(--text-secondary); margin-bottom: 0;">
        üìß –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ<br>
        ‚è∞ <strong>–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏:</strong> 17:30 (UTC+6)<br>
        üí° <strong>–°–æ–≤–µ—Ç:</strong> –ü—Ä–∏ —Å–±—Ä–æ—Å–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    </p>
</div>
""", unsafe_allow_html=True)

# –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3, tab4 = st.tabs(["üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏", "üè¢ –ì—Ä—É–ø–ø—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"])

with tab1:
    st.markdown("### üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3 = st.columns([2, 2, 1])
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", type="primary", use_container_width=True):
            st.rerun()
    with col2:
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–Ω—è", help="–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", use_container_width=True):
            with st.spinner("–°–±—Ä–æ—Å –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π..."):
                result = reset_daily_responses_and_send_messages()
                if result["success"]:
                    if result["details"]:
                        details = result["details"]
                        if details.get("errors"):
                            with st.expander("‚ö†Ô∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫"):
                                for error in details["errors"]:
                                    st.warning(error)
                    st.rerun()
                else:
                    st.error(result["message"])
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_df = load_users()
    
    if users_df.empty:
        st.markdown("""
        <div class="metric-card" style="text-align: center; padding: 3rem;">
            <h3 style="color: var(--text-secondary);">üë§ –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ</h3>
            <p style="color: var(--text-secondary);">–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã!</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        activated_users = users_df[(users_df['is_verified'] == 1) & (users_df['is_group_member'] == 1)]
        
        if activated_users.empty:
            st.markdown("""
            <div class="metric-card" style="text-align: center; padding: 3rem;">
                <h3 style="color: var(--text-secondary);">üë§ –ù–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</h3>
                <p style="color: var(--text-secondary);">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="metric-card">
                <h4 style="color: var(--text-primary); margin: 0;">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <span style="color: var(--primary-color);">{len(activated_users)}</span></h4>
            </div>
            """, unsafe_allow_html=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for idx, user in activated_users.iterrows():
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
                if user['full_name']:
                    display_name = user['full_name']
                    avatar_text = user['full_name'][0].upper()
                elif user['username']:
                    display_name = f"@{user['username']}"
                    avatar_text = user['username'][0].upper()
                else:
                    display_name = f"ID:{user['user_id']}"
                    avatar_text = "U"
                
                # –°—Ç–∞—Ç—É—Å—ã
                activity_status = "active" if user['is_active'] else "inactive"
                response_status = "‚úÖ –û—Ç–≤–µ—Ç–∏–ª" if user['has_responded_today'] else "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                with st.container():
                    col1, col2, col3, col4 = st.columns([3, 2, 2, 2])
                    
                    with col1:
                        st.markdown(f"""
                        <div style="display: flex; align-items: center; padding: 1rem 0;">
                            <div class="user-avatar">{avatar_text}</div>
                            <div>
                                <h4 style="margin: 0; color: var(--text-primary);">{display_name}</h4>
                                {f'<p style="margin: 0; color: var(--text-secondary); font-size: 0.9rem;">@{user["username"]}</p>' if user['username'] and user['full_name'] else ''}
                                <p style="margin: 0; color: var(--text-secondary); font-size: 0.8rem;">ID: {user['user_id']}</p>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                    
                    with col2:
                        if user['created_at']:
                            created_date = to_bishkek(user['created_at'])
                            # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if user['is_active']:
                                status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
                                status_class = "status-active"
                            else:
                                status_text = "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                                status_class = "status-inactive"
                            
                            st.markdown(f"""
                            <div style="padding: 1rem 0;">
                                <span class="status-badge {status_class}">{status_text}</span>
                                <p style="margin: 0.5rem 0 0 0; color: var(--text-secondary); font-size: 0.8rem;">
                                    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {created_date}
                                </p>
                            </div>
                            """, unsafe_allow_html=True)
                    
                    with col3:
                        status_class = "status-active" if user['has_responded_today'] else "status-pending"
                        st.markdown(f"""
                        <div style="padding: 1rem 0;">
                            <span class="status-badge {status_class}">{response_status}</span>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        if user['last_response']:
                            with st.expander("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç"):
                                st.text(user['last_response'][:200] + "..." if len(user['last_response']) > 200 else user['last_response'])
                        
                        # ===== –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤ =====
                        with st.expander("üìä –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤"):
                            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏..."):
                                history = get_user_responses_history(user['id'], limit=20)
                            
                            if history:
                                st.markdown(f"**–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤:** {len(history)}")
                                for i, response in enumerate(history):
                                    created_at = to_bishkek(response['created_at'])
                                    with st.expander(f"üìÖ {created_at}"):
                                        st.text(response['response_text'])
                                
                                # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é (–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –±—É–¥—É—â–µ–º)
                                st.markdown('<p style="font-size: 0.8rem; color: var(--text-secondary); text-align: center; margin-top: 1rem;">üí° –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –æ—Ç–≤–µ—Ç–æ–≤</p>', unsafe_allow_html=True)
                            else:
                                st.info("–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç–∞")
                        # ===== –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò =====
                    
                    with col4:
                        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        col4a, col4b, col4c = st.columns(3)
                        
                        with col4a:
                            current_status = user['is_active']
                            new_status = not current_status
                            # –ò–∫–æ–Ω–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¢–ï–ö–£–©–ò–ô —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            action_text = "‚úÖ" if current_status else "‚ùå"
                            action_help = f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if current_status else '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}. –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã {'–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' if current_status else '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}"
                            if st.button(action_text, key=f"toggle_{user['id']}", help=action_help):
                                if update_user_status(user['id'], new_status):
                                    st.rerun()
                                else:
                                    error_placeholder = st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
                                    time.sleep(1)
                                    error_placeholder.empty()
                        
                        with col4b:
                            if st.button("üí¨", key=f"test_{user['id']}", help="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"):
                                try:
                                    response = requests.post(f"http://localhost:8000/users/test-message/{user['user_id']}", timeout=10)
                                    if response.status_code == 200:
                                        result = response.json()
                                        if result.get("success"):
                                            success_placeholder = st.success("üí¨ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                                            time.sleep(2)
                                            success_placeholder.empty()
                                        else:
                                            error_placeholder = st.error(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                                            time.sleep(3)
                                            error_placeholder.empty()
                                    else:
                                        error_placeholder = st.error("‚ùå –û—à–∏–±–∫–∞ API")
                                        time.sleep(2)
                                        error_placeholder.empty()
                                except Exception as e:
                                    error_placeholder = st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                                    time.sleep(2)
                                    error_placeholder.empty()
                        
                        with col4c:
                            if st.button("üóëÔ∏è", key=f"delete_{user['id']}", help="–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"):
                                if delete_user(user['id']):
                                    st.rerun()
                                else:
                                    error_placeholder = st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                                    time.sleep(2)
                                    error_placeholder.empty()
                    
                    st.markdown("---")

with tab2:
    st.markdown("### üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ API
    try:
        response = requests.get("http://localhost:8000/api/groups/", timeout=10)
        if response.status_code == 200:
            groups_data = response.json()
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            col1, col2, col3 = st.columns([1, 1, 1])
            with col1:
                if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", type="primary", use_container_width=True):
                    st.rerun()
            with col2:
                if st.button("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", use_container_width=True):
                    st.session_state.show_create_group = True
            with col3:
                if st.button("‚è∞ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", use_container_width=True):
                    st.session_state.show_global_schedule = True
            
            # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
            if st.session_state.get('show_create_group', False):
                with st.expander("‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã", expanded=True):
                    with st.form("create_group_form"):
                        col1, col2 = st.columns(2)
                        with col1:
                            group_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
                            admin_username = st.text_input("Username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ @)", placeholder="admin_user")
                        with col2:
                            morning_hour = st.selectbox("–ß–∞—Å —Ä–∞—Å—Å—ã–ª–∫–∏", options=list(range(0, 24)), index=17)
                            minutes_options = list(range(0, 60, 5))
                            morning_minute = st.selectbox("–ú–∏–Ω—É—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏", options=minutes_options, index=minutes_options.index(30))
                            days_selected = st.multiselect("–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏", options=list(range(7)), format_func=lambda x: DAYS_OF_WEEK_MAP[x], default=[0,1,2,3,4])
                        
                        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã...")
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.form_submit_button("‚úÖ –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", type="primary", use_container_width=True):
                                if group_name and admin_username and admin_username.strip():
                                    group_data = {
                                        "name": group_name,
                                        "description": description if description else None,
                                        "admin_username": admin_username.strip(),
                                        "morning_hour": morning_hour,
                                        "morning_minute": morning_minute,
                                        "days_of_week": days_selected
                                    }
                                    
                                    try:
                                        create_response = requests.post(
                                            "http://localhost:8000/api/groups/", 
                                            json=group_data, 
                                            timeout=10
                                        )
                                        if create_response.status_code == 201:
                                            st.success("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                                            st.session_state.show_create_group = False
                                            st.rerun()
                                        else:
                                            error_data = create_response.json()
                                            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                                    except Exception as e:
                                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
                                else:
                                    st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                        with col2:
                            if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True):
                                st.session_state.show_create_group = False
                                st.rerun()
            
            # –§–æ—Ä–º–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if st.session_state.get('show_global_schedule', False):
                with st.expander("‚è∞ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø", expanded=True):
                    st.markdown("""
                    <div style="background: rgba(255, 193, 7, 0.1); padding: 1rem; border-radius: 8px; border-left: 4px solid #ffc107; margin-bottom: 1rem;">
                        <h4 style="margin: 0; color: #856404;">‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</h4>
                        <p style="margin: 0.5rem 0 0 0; color: #856404;">
                            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø. 
                            –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    with st.form("global_schedule_form"):
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            global_hour = st.selectbox("–ß–∞—Å —Ä–∞—Å—Å—ã–ª–∫–∏", options=list(range(0, 24)), index=17)
                        with col2:
                            minutes_options = list(range(0, 60, 5))
                            global_minute = st.selectbox("–ú–∏–Ω—É—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏", options=minutes_options, index=minutes_options.index(30))
                        with col3:
                            global_timezone = st.selectbox(
                                "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞",
                                options=["Asia/Bishkek", "Asia/Almaty", "Asia/Tashkent", "Europe/Moscow", "UTC"],
                                index=0
                            )
                        
                        st.markdown(f"""
                        <div style="background: rgba(32, 201, 151, 0.1); padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                            <strong>–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</strong> {global_hour:02d}:{global_minute:02d} ({global_timezone})<br>
                            <strong>–ë—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫:</strong> {len(groups_data) if groups_data else 0} –≥—Ä—É–ø–ø–∞–º
                        </div>
                        """, unsafe_allow_html=True)
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.form_submit_button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º", type="primary", use_container_width=True):
                                if groups_data:
                                    success_count = 0
                                    error_count = 0
                                    
                                    progress_bar = st.progress(0)
                                    status_text = st.empty()
                                    
                                    for i, group in enumerate(groups_data):
                                        try:
                                            status_text.text(f"–û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É '{group['name']}'...")
                                            
                                            schedule_response = requests.put(
                                                f"http://localhost:8000/api/groups/{group['id']}/schedule",
                                                params={
                                                    "morning_hour": global_hour,
                                                    "morning_minute": global_minute,
                                                    "timezone": global_timezone
                                                },
                                                timeout=10
                                            )
                                            
                                            if schedule_response.status_code == 200:
                                                success_count += 1
                                            else:
                                                error_count += 1
                                                
                                        except Exception as e:
                                            error_count += 1
                                            st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã '{group['name']}': {e}")
                                        
                                        progress_bar.progress((i + 1) / len(groups_data))
                                    
                                    status_text.empty()
                                    progress_bar.empty()
                                    
                                    if success_count > 0:
                                        success_placeholder = st.success(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {success_count}/{len(groups_data)} –≥—Ä—É–ø–ø!")
                                        # if error_count == 0:
                                        #     st.balloons()
                                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ~1.5 c–µ–∫
                                        time.sleep(1.5)
                                        success_placeholder.empty()
                                        st.session_state.show_global_schedule = False
                                        st.rerun()
                                    else:
                                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã")
                                else:
                                    st.warning("‚ö†Ô∏è –ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                        
                        with col2:
                            if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True):
                                st.session_state.show_global_schedule = False
                                st.rerun()
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø
            if groups_data:
                st.markdown(f"""
                <div class="metric-card">
                    <h4 style="color: var(--text-primary); margin: 0;">–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: <span style="color: var(--primary-color);">{len(groups_data)}</span></h4>
                </div>
                """, unsafe_allow_html=True)
                
                for group in groups_data:
                    with st.container():
                        col1, col2, col3, col4 = st.columns([4, 3, 3, 2])
                        
                        with col1:
                            status_icon = "‚úÖ" if group['is_active'] else "‚ùå"
                            st.markdown(f"""
                            <div style="display: flex; align-items: center; padding: 1rem 0;">
                                <div class="user-avatar">{group['name'][0].upper()}</div>
                                <div>
                                    <h4 style="margin: 0; color: var(--text-primary);">{status_icon} {group['name']}</h4>
                                    <p style="margin: 0; color: var(--text-secondary); font-size: 0.9rem;">
                                        {group['description'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
                                    </p>
                                    <p style="margin: 0; color: var(--text-secondary); font-size: 0.8rem;">
                                        ID: {group['id']} | –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group['members_count'] or 0}
                                    </p>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        with col2:
                            admin_name = f"@{group['admin_username']}" if group['admin_username'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
                            schedule_time = f"{group['morning_hour']:02d}:{group['morning_minute']:02d}"
                            days_of_week = group.get('days_of_week', [0,1,2,3,4])
                            if isinstance(days_of_week, str):
                                days_of_week = [int(x) for x in days_of_week.split(',') if x.strip().isdigit()]
                            days_str = ', '.join([DAYS_OF_WEEK_MAP[d] for d in days_of_week]) if days_of_week else '‚Äî'
                            st.markdown(f"""
                            <div style="padding: 1rem 0;">
                                <p style="margin: 0; color: var(--text-primary); font-weight: 500;">üë§ {admin_name}</p>
                                <p style="margin: 0; color: var(--text-secondary); font-size: 0.8rem;">
                                    ‚è∞ –†–∞—Å—Å—ã–ª–∫–∞: {schedule_time} ({group['timezone']})<br>
                                    <span style='color: var(--primary-color);'>–î–Ω–∏: {days_str}</span>
                                </p>
                                <p style="margin: 0; color: var(--text-secondary); font-size: 0.8rem;">
                                    üìÖ –°–æ–∑–¥–∞–Ω–∞: {to_bishkek(group['created_at'])}
                                </p>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        with col3:
                            with st.expander("üîó –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"):
                                token_preview = group['activation_token'][:8] + "..."
                                activation_url = f"https://t.me/aidailytasksBot?start={group['activation_token']}"
                                st.markdown(f"""
                                <div class="activation-link" style="font-size: 0.7rem; padding: 0.5rem;">
                                    {activation_url}
                                </div>
                                """, unsafe_allow_html=True)
                                copy_to_clipboard_button(activation_url)
                            
                            # ===== –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è =====
                            with st.expander("‚è∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"):
                                with st.form(f"schedule_form_{group['id']}"):
                                    new_hour = st.selectbox(
                                        "–ß–∞—Å —Ä–∞—Å—Å—ã–ª–∫–∏", 
                                        options=list(range(0, 24)), 
                                        index=group['morning_hour'],
                                        key=f"hour_{group['id']}"
                                    )
                                    minutes_options = list(range(0, 60, 5))
                                    new_minute = st.selectbox(
                                        "–ú–∏–Ω—É—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏", 
                                        options=minutes_options,
                                        index=minutes_options.index(group['morning_minute']) if group['morning_minute'] in minutes_options else 0,
                                        key=f"minute_{group['id']}"
                                    )
                                    new_timezone = st.selectbox(
                                        "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞",
                                        options=["Asia/Bishkek", "Asia/Almaty", "Asia/Tashkent", "Europe/Moscow", "UTC"],
                                        index=["Asia/Bishkek", "Asia/Almaty", "Asia/Tashkent", "Europe/Moscow", "UTC"].index(group['timezone']) if group['timezone'] in ["Asia/Bishkek", "Asia/Almaty", "Asia/Tashkent", "Europe/Moscow", "UTC"] else 0,
                                        key=f"tz_{group['id']}"
                                    )
                                    days_selected = st.multiselect(
                                        "–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏",
                                        options=list(range(7)),
                                        format_func=lambda x: DAYS_OF_WEEK_MAP[x],
                                        default=group.get('days_of_week', [0,1,2,3,4]),
                                        key=f"days_{group['id']}"
                                    )
                                    days_selected_str = ', '.join([DAYS_OF_WEEK_MAP[d] for d in days_selected]) if days_selected else '‚Äî'
                                    st.caption(f"–í—ã–±—Ä–∞–Ω–æ: {days_selected_str}")
                                    
                                    if st.form_submit_button("‚úÖ –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", type="primary", use_container_width=True):
                                        try:
                                            schedule_response = requests.put(
                                                f"http://localhost:8000/api/groups/{group['id']}/schedule",
                                                params={
                                                    "morning_hour": new_hour,
                                                    "morning_minute": new_minute,
                                                    "timezone": new_timezone,
                                                    "days_of_week": ','.join(str(d) for d in days_selected)
                                                },
                                                timeout=10
                                            )
                                            if schedule_response.status_code == 200:
                                                success_placeholder = st.success(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã '{group['name']}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_hour:02d}:{new_minute:02d} ({new_timezone})")
                                                # st.balloons()
                                                time.sleep(2.5)
                                                success_placeholder.empty()
                                                st.rerun()
                                            else:
                                                error_data = schedule_response.json()
                                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                                        except Exception as e:
                                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
                            # ===== –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò =====

                            # ===== –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã =====
                            with st.expander("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É"):
                                with st.form(f"edit_group_form_{group['id']}"):
                                    new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", value=group['name'], key=f"edit_name_{group['id']}")
                                    new_admin_username = st.text_input("Username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ @)", value=group['admin_username'] or "", key=f"edit_admin_{group['id']}")
                                    new_desc = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", value=group['description'] or "", key=f"edit_desc_{group['id']}", height=70)
                                    is_active_checkbox = st.checkbox("–ì—Ä—É–ø–ø–∞ –∞–∫—Ç–∏–≤–Ω–∞", value=group['is_active'], key=f"edit_active_{group['id']}")

                                    if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary", use_container_width=True):
                                        payload = {}
                                        if new_name.strip() and new_name != group['name']:
                                            payload['name'] = new_name.strip()
                                        # –ü–æ–∑–≤–æ–ª—è–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—è None
                                        if new_desc != (group['description'] or ""):
                                            payload['description'] = new_desc.strip() if new_desc.strip() else None
                                        if new_admin_username.strip() and new_admin_username.strip() != group['admin_username']:
                                            payload['admin_username'] = new_admin_username.strip()
                                        if is_active_checkbox != group['is_active']:
                                            payload['is_active'] = is_active_checkbox

                                        if payload:
                                            try:
                                                edit_resp = requests.put(
                                                    f"http://localhost:8000/api/groups/{group['id']}",
                                                    json=payload,
                                                    timeout=10
                                                )
                                                if edit_resp.status_code == 200:
                                                    success_placeholder = st.success("‚úÖ –ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                                                    time.sleep(1.5)
                                                    success_placeholder.empty()
                                                    st.rerun()
                                                else:
                                                    error_data = edit_resp.json()
                                                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                                            except Exception as e:
                                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
                                            else:
                                                st.info("–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –≤–Ω–µ—Å–µ–Ω—ã")
                            # ===== –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ì–†–£–ü–ü–´ =====
                        
                            with col4:
                                # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                                action_col1, action_col2, action_col3 = st.columns(3)
                                
                                with action_col1:
                                    if st.button("üìä", key=f"stats_{group['id']}", help="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã", use_container_width=True):
                                        try:
                                            stats_response = requests.get(f"http://localhost:8000/api/groups/{group['id']}/stats", timeout=10)
                                            if stats_response.status_code == 200:
                                                stats_data = stats_response.json()
                                                st.json(stats_data)
                                        except Exception as e:
                                            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                                
                                with action_col2:
                                    if st.button("üîÑ", key=f"regen_{group['id']}", help="–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω", use_container_width=True):
                                        try:
                                            regen_response = requests.post(f"http://localhost:8000/api/groups/{group['id']}/regenerate-token", timeout=10)
                                            if regen_response.status_code == 200:
                                                st.success("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                                st.rerun()
                                            else:
                                                st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
                                        except Exception as e:
                                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                                
                                with action_col3:
                                    if group['is_active']:
                                        if st.button("‚ùå", key=f"deactivate_{group['id']}", help="–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", use_container_width=True):
                                            try:
                                                del_response = requests.delete(f"http://localhost:8000/api/groups/{group['id']}", timeout=10)
                                                if del_response.status_code == 204:
                                                    st.success("‚úÖ –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞!")
                                                    st.rerun()
                                                else:
                                                    st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                                            except Exception as e:
                                                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                                    else:
                                        st.markdown("‚ö™", help="–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞")
                            
                            st.markdown("---")
            else:
                st.markdown("""
                <div class="metric-card" style="text-align: center; padding: 3rem;">
                    <h3 style="color: var(--text-secondary);">üè¢ –ù–µ—Ç –≥—Ä—É–ø–ø –≤ —Å–∏—Å—Ç–µ–º–µ</h3>
                    <p style="color: var(--text-secondary);">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!</p>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")

with tab3:
    st.markdown("### üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã")
    
    users_df = load_users()
    if not users_df.empty:
        # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total_users = len(users_df)
            st.markdown(f"""
            <div class="metric-card">
                <h3 style="color: var(--primary-color); margin: 0; font-size: 2rem;">{total_users}</h3>
                <p style="color: var(--text-secondary); margin: 0.5rem 0 0 0;">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            activated_users = len(users_df[(users_df['is_verified'] == 1) & (users_df['is_group_member'] == 1)])
            st.markdown(f"""
            <div class="metric-card">
                <h3 style="color: var(--success-color); margin: 0; font-size: 2rem;">{activated_users}</h3>
                <p style="color: var(--text-secondary); margin: 0.5rem 0 0 0;">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            active_users = len(users_df[(users_df['is_active'] == 1) & (users_df['is_verified'] == 1) & (users_df['is_group_member'] == 1)])
            st.markdown(f"""
            <div class="metric-card">
                <h3 style="color: var(--warning-color); margin: 0; font-size: 2rem;">{active_users}</h3>
                <p style="color: var(--text-secondary); margin: 0.5rem 0 0 0;">–ê–∫—Ç–∏–≤–Ω—ã—Ö</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            responded_today = len(users_df[(users_df['has_responded_today'] == 1) & (users_df['is_group_member'] == 1)])
            st.markdown(f"""
            <div class="metric-card">
                <h3 style="color: var(--secondary-color); margin: 0; font-size: 2rem;">{responded_today}</h3>
                <p style="color: var(--text-secondary); margin: 0.5rem 0 0 0;">–û—Ç–≤–µ—Ç–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è</p>
            </div>
            """, unsafe_allow_html=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø–æ –¥–Ω—è–º
        if 'created_at' in users_df.columns and len(users_df) > 0:
            users_df['created_at'] = pd.to_datetime(users_df['created_at'])
            daily_activations = users_df[users_df['is_verified'] == 1].groupby(users_df['created_at'].dt.date).size().reset_index()
            daily_activations.columns = ['date', 'count']
            
            if len(daily_activations) > 0:
                st.markdown("### üìà –î–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π")
                
                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å Plotly
                fig = px.line(daily_activations, x='date', y='count', 
                             title='–ê–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –¥–Ω—è–º',
                             markers=True)
                
                fig.update_layout(
                    plot_bgcolor='rgba(0,0,0,0)',
                    paper_bgcolor='rgba(0,0,0,0)',
                    font_color='white',
                    title_font_size=20,
                    title_x=0.5
                )
                
                fig.update_traces(
                    line=dict(color='#667eea', width=3),
                    marker=dict(color='#667eea', size=8)
                )
                
                st.plotly_chart(fig, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        if activated_users > 0:
            st.markdown("### üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è")
            response_rate = (responded_today / activated_users) * 100 if activated_users > 0 else 0
            
            # –ö—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            st.markdown(f"""
            <div class="metric-card">
                <h4 style="color: var(--text-primary); margin-bottom: 1rem;">–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö: {response_rate:.1f}%</h4>
                <div style="background: var(--surface-color); border-radius: 10px; height: 20px; overflow: hidden;">
                    <div style="background: var(--primary-gradient); height: 100%; width: {response_rate}%; border-radius: 10px; transition: width 0.5s ease;"></div>
                </div>
                <p style="color: var(--text-secondary); margin-top: 0.5rem; font-size: 0.9rem;">
                    {responded_today} –∏–∑ {activated_users} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–∏
                </p>
            </div>
            """, unsafe_allow_html=True)
            
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
            labels = ['–û—Ç–≤–µ—Ç–∏–ª–∏', '–ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏']
            values = [responded_today, activated_users - responded_today]
            colors = ['#4ade80', '#f87171']
            
            fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])
            fig.update_traces(
                hoverinfo="label+percent+value",
                textinfo="label+percent",
                textfont_size=12,
                marker=dict(colors=colors, line=dict(color='#000000', width=2))
            )
            fig.update_layout(
                title_text="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è",
                title_x=0.5,
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font_color='white'
            )
            
            st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.markdown("### üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h4 style="color: var(--text-primary); margin-top: 0;">üìÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞</h4>
        """, unsafe_allow_html=True)
        
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", use_container_width=True):
            st.rerun()
        
        try:
            response = requests.get("http://localhost:8000/users/scheduler/info", timeout=10)
            if response.status_code == 200:
                scheduler_info = response.json()
                
                if scheduler_info.get("running"):
                    st.markdown('<span class="status-badge status-active">‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç</span>', unsafe_allow_html=True)
                else:
                    st.markdown('<span class="status-badge status-inactive">‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</span>', unsafe_allow_html=True)
                
                st.markdown(f"**–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:** {scheduler_info.get('jobs_count', 0)}")
                
                if scheduler_info.get("next_morning_questions"):
                    st.markdown(f"**–°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:** {scheduler_info['next_morning_questions']}")
                else:
                    st.warning("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
                if scheduler_info.get("jobs"):
                    with st.expander("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"):
                        for job in scheduler_info["jobs"]:
                            st.markdown(f"**{job['id']}** ({job['name']})")
                            if job['next_run_time']:
                                st.caption(f"–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {to_bishkek(job['next_run_time'])}")
                            st.caption(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {job['trigger']}")
                            st.divider()
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h4 style="color: var(--text-primary); margin-top: 0;">ü§ñ Telegram –ë–æ—Ç</h4>
        """, unsafe_allow_html=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        users_df = load_users()
        activated_users = users_df[users_df['is_verified'] == 1]
        
        if not activated_users.empty:
            test_user = activated_users.iloc[0]
            user_display = test_user['full_name'] or f"@{test_user['username']}" if test_user['username'] else f"ID:{test_user['user_id']}"
            
            st.markdown(f"**–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_display}")
            
            if st.button("üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", use_container_width=True):
                try:
                    response = requests.post(
                        f"http://localhost:8000/users/test-message/{test_user['user_id']}", 
                        timeout=10
                    )
                    if response.status_code == 200:
                        result = response.json()
                        if result.get("success"):
                            success_placeholder = st.success("üí¨ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                            time.sleep(2)
                            success_placeholder.empty()
                        else:
                            error_placeholder = st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('error')}")
                            time.sleep(3)
                            error_placeholder.empty()
                    else:
                        error_placeholder = st.error("‚ùå –û—à–∏–±–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞")
                        time.sleep(2)
                        error_placeholder.empty()
                except Exception as e:
                    error_placeholder = st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                    time.sleep(2)
                    error_placeholder.empty()
        else:
            st.info("üë§ –ù–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    # –†—É—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    st.markdown("""
    <div class="metric-card">
        <h4 style="color: var(--text-primary); margin-top: 0;">üîÑ –†—É—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h4>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –°–ï–ô–ß–ê–°", type="secondary", use_container_width=True):
            with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π..."):
                try:
                    response = requests.post("http://localhost:8000/users/send-repeat-questions", timeout=30)
                    if response.status_code == 200:
                        result = response.json()
                        success_count = result.get('success_count', 0)
                        total_count = result.get('total_count', 0)
                        
                        if success_count > 0:
                            success_placeholder = st.success(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count}/{total_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                            time.sleep(3)
                            success_placeholder.empty()
                        else:
                            warning_placeholder = st.warning("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)")
                            time.sleep(3)
                            warning_placeholder.empty()
                        
                        if result.get("errors"):
                            with st.expander("‚ö†Ô∏è –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"):
                                for error in result["errors"]:
                                    st.warning(error)
                    else:
                        error_placeholder = st.error("‚ùå –û—à–∏–±–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞")
                        time.sleep(2)
                        error_placeholder.empty()
                except Exception as e:
                    error_placeholder = st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                    time.sleep(2)
                    error_placeholder.empty()
    
    with col2:
        if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", use_container_width=True):
            with st.spinner("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞..."):
                try:
                    response = requests.post("http://localhost:8000/users/scheduler/restart", timeout=30)
                    if response.status_code == 200:
                        result = response.json()
                        if result.get('success'):
                            success_placeholder = st.success(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {result.get('jobs_count', 0)}")
                            time.sleep(3)
                            success_placeholder.empty()
                            st.rerun()
                        else:
                            error_placeholder = st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                            time.sleep(3)
                            error_placeholder.empty()
                    else:
                        error_placeholder = st.error("‚ùå –û—à–∏–±–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞")
                        time.sleep(2)
                        error_placeholder.empty()
                except Exception as e:
                    error_placeholder = st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                    time.sleep(2)
                    error_placeholder.empty()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
with st.sidebar:
    st.markdown("""
    <div class="sidebar-content">
        <h3 style="color: var(--text-primary);">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        
        <h4 style="color: var(--primary-color);">üîó –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</h4>
        <div style="background: var(--surface-color); padding: 1rem; border-radius: 8px; font-family: monospace; font-size: 0.8rem; word-break: break-all; margin-bottom: 1rem;">
            https://t.me/aidailytasksBot?start=group_activation
        </div>
        
        <h4 style="color: var(--primary-color);">üìã –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã</h4>
        <div style="color: var(--text-secondary); font-size: 0.9rem; line-height: 1.6;">
            <strong>üè¢ –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</strong><br>
            ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º<br>
            ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è–º–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏<br>
            ‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –ø–ª–∞–Ω–æ–≤<br><br>
            
            <strong>üë• –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</strong><br>
            ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥—è—Ç –ø–æ —Å—Å—ã–ª–∫–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞<br>
            ‚Ä¢ –ù–∞–∂–∏–º–∞—é—Ç /start –≤ –±–æ—Ç–µ<br>
            ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è<br><br>
            
            <strong>‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å:</strong><br>
            ‚Ä¢ 17:30 - –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã<br>
            ‚Ä¢ 18:30 - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏
        </div>
        
        <div style="margin-top: 2rem; padding-top: 1rem; border-top: 1px solid var(--border-color);">
            <h4 style="color: var(--primary-color);">üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞</h4>
            <p style="color: var(--text-primary); font-family: monospace;">{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
            
            <h4 style="color: var(--primary-color);">üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h4>
            <p style="color: var(--success-color);">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if DB_PATH.exists() else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}</p>
            <p style="color: var(--text-secondary); font-size: 0.8rem;">–ë–æ—Ç: @aidailytasksBot</p>
        </div>
    </div>
    """, unsafe_allow_html=True)