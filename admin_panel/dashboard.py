import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI Daily Tasks ‚Äî –ê–¥–º–∏–Ω–∫–∞",
    page_icon="üë•",
    layout="wide"
)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
BASE_DIR = Path(__file__).resolve().parent.parent
DB_PATH = BASE_DIR / "data" / "reports_backup.sqlite"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    try:
        DB_PATH.parent.mkdir(parents=True, exist_ok=True)
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            telegram_id TEXT UNIQUE,
            full_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            last_response TEXT,
            has_responded_today BOOLEAN DEFAULT 0
        )
        """)
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def load_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(str(DB_PATH))
        df = pd.read_sql_query("SELECT * FROM users ORDER BY created_at DESC", conn)
        conn.close()
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return pd.DataFrame()

def add_user(username):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        username = username.replace('@', '').strip()
        
        if not username:
            return False, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute(
            "INSERT INTO users (username, is_active) VALUES (?, 1)",
            (username,)
        )
        
        conn.commit()
        conn.close()
        return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
    except sqlite3.IntegrityError:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def update_user_status(user_id, is_active):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute(
            "UPDATE users SET is_active = ? WHERE id = ?",
            (is_active, user_id)
        )
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def delete_user(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def reset_daily_responses():
    """–°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å"""
    try:
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute("UPDATE users SET has_responded_today = 0, last_response = NULL")
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
if not init_database():
    st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    st.stop()

# ======================
# –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–°
# ======================
st.title("üë• AI Daily Tasks ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
st.caption("–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ @username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–ª–∞–Ω–æ–≤")

# –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3 = st.tabs(["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

with tab1:
    st.subheader("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", type="primary"):
            st.rerun()
    with col2:
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–Ω—è", help="–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è"):
            if reset_daily_responses():
                st.success("–û—Ç–≤–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã!")
                st.rerun()
            else:
                st.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_df = load_users()
    
    if users_df.empty:
        st.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    else:
        st.write(f"**–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(users_df)}")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for idx, user in users_df.iterrows():
            with st.container():
                col1, col2, col3, col4, col5 = st.columns([3, 2, 2, 1, 1])
                
                with col1:
                    status_icon = "‚úÖ" if user['is_active'] else "‚ùå"
                    st.write(f"{status_icon} **@{user['username']}**")
                    if user['full_name']:
                        st.caption(f"üë§ {user['full_name']}")
                
                with col2:
                    if user['telegram_id']:
                        st.write(f"üì± {user['telegram_id']}")
                    else:
                        st.write("üì± –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                with col3:
                    response_icon = "‚úÖ" if user['has_responded_today'] else "‚è≥"
                    st.write(f"{response_icon} –û—Ç–≤–µ—Ç —Å–µ–≥–æ–¥–Ω—è")
                    if user['last_response']:
                        with st.expander("–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç"):
                            st.text(user['last_response'][:200] + "..." if len(user['last_response']) > 200 else user['last_response'])
                
                with col4:
                    new_status = not user['is_active']
                    action_text = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if new_status else "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
                    if st.button(action_text, key=f"toggle_{user['id']}"):
                        if update_user_status(user['id'], new_status):
                            st.success(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
                with col5:
                    if st.button("üóëÔ∏è", key=f"delete_{user['id']}", help="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                        if delete_user(user['id']):
                            st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                
                st.divider()

with tab2:
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    with st.form("add_user_form"):
        st.write("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram")
        username_input = st.text_input(
            "Username", 
            placeholder="test_user –∏–ª–∏ @test_user",
            help="–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å @ –∏–ª–∏ –±–µ–∑"
        )
        
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", type="primary")
        
        if submitted:
            if username_input:
                success, message = add_user(username_input)
                if success:
                    st.success(message)
                    st.rerun()
                else:
                    st.error(message)
            else:
                st.error("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")

with tab3:
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    users_df = load_users()
    if not users_df.empty:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(users_df))
        
        with col2:
            active_users = len(users_df[users_df['is_active'] == 1])
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_users)
        
        with col3:
            connected_users = len(users_df[users_df['telegram_id'].notna()])
            st.metric("–ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–æ—Ç—É", connected_users)
        
        with col4:
            responded_today = len(users_df[users_df['has_responded_today'] == 1])
            st.metric("–û—Ç–≤–µ—Ç–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è", responded_today)
        
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if 'created_at' in users_df.columns:
            users_df['created_at'] = pd.to_datetime(users_df['created_at'])
            daily_registrations = users_df.groupby(users_df['created_at'].dt.date).size()
            
            if len(daily_registrations) > 0:
                st.subheader("üìà –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º")
                st.line_chart(daily_registrations)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
with st.sidebar:
    st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.write("""
    **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
    
    1. üë§ –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ @username
    2. ü§ñ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 9:00 (UTC+6)
    3. ‚è≥ –ñ–¥–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    4. üß† Gemini —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–æ–≤
    5. üì¨ –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π –æ—Ç—á–µ—Ç
    """)
    
    st.divider()
    
    st.write("**–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:**")
    st.write(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    
    if st.button("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        st.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
        st.info(f"–°—Ç–∞—Ç—É—Å –ë–î: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if DB_PATH.exists() else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")