import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime
from pathlib import Path
import logging
import secrets
import string
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI Daily Tasks ‚Äî –ê–¥–º–∏–Ω–∫–∞",
    page_icon="üë•",
    layout="wide"
)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
BASE_DIR = Path(__file__).resolve().parent.parent
DB_PATH = BASE_DIR / "data" / "reports_backup.sqlite"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_activation_token():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(32))

def get_bot_username():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ username –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.get("http://127.0.0.1:8000/users/bot/info", timeout=5)
        if response.status_code == 200:
            return response.json().get("bot_username", "your_bot")
        return "your_bot"
    except:
        return "your_bot"

def init_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    try:
        DB_PATH.parent.mkdir(parents=True, exist_ok=True)
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT UNIQUE,
            username TEXT UNIQUE NOT NULL,
            full_name TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT 1,
            is_verified BOOLEAN DEFAULT 0,
            last_response TEXT,
            has_responded_today BOOLEAN DEFAULT 0,
            activation_token TEXT UNIQUE
        )
        """)
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def load_users():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(str(DB_PATH))
        df = pd.read_sql_query("SELECT * FROM users ORDER BY created_at DESC", conn)
        conn.close()
        return df
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return pd.DataFrame()

def validate_username(username):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è username"""
    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    username = username.strip().lstrip('@')
    
    if not username:
        return False, "Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç username (–ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)
    import re
    if not re.match(r'^[a-zA-Z0-9_]{5,}$', username):
        return False, "Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    return True, username

def add_user(username):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º username
        is_valid, result = validate_username(username)
        if not is_valid:
            return False, result
        
        clean_username = result
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        activation_token = generate_activation_token()
        
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute(
            "INSERT INTO users (username, is_active, is_verified, activation_token) VALUES (?, 1, 0, ?)",
            (clean_username, activation_token)
        )
        
        conn.commit()
        conn.close()
        
        # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        bot_username = get_bot_username()
        activation_link = f"https://t.me/{bot_username}?start={activation_token}"
        
        return True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{clean_username} –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n{activation_link}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º."
    except sqlite3.IntegrityError:
        return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

def get_activation_link(user):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user['activation_token']:
        bot_username = get_bot_username()
        return f"https://t.me/{bot_username}?start={user['activation_token']}"
    return None

def regenerate_activation_token(user_id):
    """–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.post(f"http://127.0.0.1:8000/users/{user_id}/regenerate-token", timeout=5)
        if response.status_code == 200:
            return True
        return False
    except:
        return False

def update_user_status(user_id, is_active):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute(
            "UPDATE users SET is_active = ? WHERE id = ?",
            (is_active, user_id)
        )
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def delete_user(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def reset_daily_responses():
    """–°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å"""
    try:
        conn = sqlite3.connect(str(DB_PATH))
        cursor = conn.cursor()
        
        cursor.execute("UPDATE users SET has_responded_today = 0, last_response = NULL")
        
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
if not init_database():
    st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    st.stop()

# ======================
# –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–°
# ======================
st.title("üë• AI Daily Tasks ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
st.caption("–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ @username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–ª–∞–Ω–æ–≤")

# –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3 = st.tabs(["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])

with tab1:
    st.subheader("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", type="primary"):
            st.rerun()
    with col2:
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–Ω—è", help="–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è"):
            if reset_daily_responses():
                st.success("–û—Ç–≤–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã!")
                st.rerun()
            else:
                st.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_df = load_users()
    
    if users_df.empty:
        st.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
    else:
        st.write(f"**–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(users_df)}")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        for idx, user in users_df.iterrows():
            with st.container():
                col1, col2, col3, col4, col5 = st.columns([3, 2, 2, 1, 1])
                
                with col1:
                    # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    activity_icon = "‚úÖ" if user['is_active'] else "‚ùå"
                    # –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    verify_icon = "‚úÖ" if user['is_verified'] else "‚è≥"
                    
                    st.write(f"{activity_icon} **@{user['username']}**")
                    if user['full_name']:
                        st.caption(f"üë§ {user['full_name']}")
                    if user['user_id']:
                        st.caption(f"ID: {user['user_id']}")
                
                with col2:
                    st.write(f"{verify_icon} –°—Ç–∞—Ç—É—Å")
                    if user['is_verified']:
                        st.write("üîó –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                    else:
                        st.write("‚ö†Ô∏è –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        activation_link = get_activation_link(user)
                        if activation_link:
                            col_link1, col_link2 = st.columns([3, 1])
                            with col_link1:
                                if st.button("üìã –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", key=f"link_{user['id']}"):
                                    st.code(activation_link, language=None)
                                    st.caption("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                            with col_link2:
                                if st.button("üîÑ", key=f"regen_{user['id']}", help="–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"):
                                    if regenerate_activation_token(user['id']):
                                        st.success("–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
                                        st.rerun()
                                    else:
                                        st.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                
                with col3:
                    response_icon = "‚úÖ" if user['has_responded_today'] else "‚è≥"
                    st.write(f"{response_icon} –û—Ç–≤–µ—Ç —Å–µ–≥–æ–¥–Ω—è")
                    if user['last_response']:
                        with st.expander("–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç"):
                            st.text(user['last_response'][:200] + "..." if len(user['last_response']) > 200 else user['last_response'])
                
                with col4:
                    new_status = not user['is_active']
                    action_text = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if new_status else "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
                    if st.button(action_text, key=f"toggle_{user['id']}"):
                        if update_user_status(user['id'], new_status):
                            st.success(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                
                with col5:
                    if st.button("üóëÔ∏è", key=f"delete_{user['id']}", help="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                        if delete_user(user['id']):
                            st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!")
                            st.rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                
                st.divider()

with tab2:
    st.subheader("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–æ–π
    if 'success_message' not in st.session_state:
        st.session_state.success_message = None
    if 'error_message' not in st.session_state:
        st.session_state.error_message = None
    if 'form_key' not in st.session_state:
        st.session_state.form_key = 0
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if st.session_state.success_message:
        success_col1, success_col2 = st.columns([4, 1])
        with success_col1:
            st.success(st.session_state.success_message)
        with success_col2:
            if st.button("‚úï", key="close_success", help="–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"):
                st.session_state.success_message = None
                st.rerun()
    
    if st.session_state.error_message:
        error_col1, error_col2 = st.columns([4, 1])
        with error_col1:
            st.error(st.session_state.error_message)
        with error_col2:
            if st.button("‚úï", key="close_error", help="–ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"):
                st.session_state.error_message = None
                st.rerun()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–ª—é—á –¥–ª—è —Ñ–æ—Ä–º—ã, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    with st.form(key=f"add_user_form_{st.session_state.form_key}"):
        st.write("–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram")
        
        username_input = st.text_input(
            "Username", 
            placeholder="@john_doe –∏–ª–∏ john_doe",
            help="–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (—Å @ –∏–ª–∏ –±–µ–∑)"
        )
        
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", type="primary")
        
        if submitted:
            if username_input.strip():
                success, message = add_user(username_input.strip())
                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–ª—é—á —Ñ–æ—Ä–º—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
                    st.session_state.success_message = message
                    st.session_state.error_message = None
                    st.session_state.form_key += 1  # –≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—á–∏—Å—Ç–∫–µ —Ñ–æ—Ä–º—ã
                    st.rerun()
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    st.session_state.error_message = message
                    st.session_state.success_message = None
                    st.rerun()
            else:
                st.session_state.error_message = "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
                st.session_state.success_message = None
                st.rerun()

with tab3:
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    users_df = load_users()
    if not users_df.empty:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", len(users_df))
        
        with col2:
            active_users = len(users_df[users_df['is_active'] == 1])
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_users)
        
        with col3:
            verified_users = len(users_df[users_df['is_verified'] == 1])
            st.metric("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö", verified_users)
        
        with col4:
            responded_today = len(users_df[users_df['has_responded_today'] == 1])
            st.metric("–û—Ç–≤–µ—Ç–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è", responded_today)
        
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if 'created_at' in users_df.columns:
            users_df['created_at'] = pd.to_datetime(users_df['created_at'])
            daily_registrations = users_df.groupby(users_df['created_at'].dt.date).size()
            
            if len(daily_registrations) > 0:
                st.subheader("üìà –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º")
                st.line_chart(daily_registrations)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
with st.sidebar:
    st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.write("""
    **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
    
    1. üë§ –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ @username
    2. üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    3. üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è
    4. ü§ñ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 9:00
    5. ‚è≥ –ñ–¥–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    6. üß† Gemini —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–æ–≤
    7. üì¨ –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π –æ—Ç—á–µ—Ç
    
    **–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:**
    - –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –°—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    - –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è
    - –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    """)
    
    st.divider()
    
    st.write("**–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:**")
    st.write(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    
    if st.button("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        st.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
        st.info(f"–°—Ç–∞—Ç—É—Å –ë–î: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if DB_PATH.exists() else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        st.info(f"–ë–æ—Ç: @{get_bot_username()}")