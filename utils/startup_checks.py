from pathlib import Path
import subprocess
import sys


def check_env_file() -> bool:
    """Check if .env file exists and provide instructions if missing."""
    env_path = Path(".env")
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\nüìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:")
        print("GEMINI_API_KEY=your_gemini_api_key_here")
        print("TG_BOT_TOKEN=your_telegram_bot_token_here")
        print("ADMIN_ID=your_telegram_user_id_here")
        print("\n–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞:")
        print("cp docker.env.example .env")
        return False
    return True


def check_database() -> bool:
    """Ensure database exists, run migrations if needed."""
    db_path = Path("data/reports_backup.sqlite")
    if not db_path.exists():
        print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...")
        try:
            subprocess.run([sys.executable, "migrations/init_users.py"], check=True)
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return False
    return True
