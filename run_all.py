#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã AI Daily Tasks: –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–±–æ—Ç–∞)
"""
import subprocess
import sys
import signal
import time
import os
from pathlib import Path

processes = []

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"""
    env_path = Path(".env")
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\nüìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:")
        print("GEMINI_API_KEY=your_gemini_api_key_here")
        print("TG_BOT_TOKEN=your_telegram_bot_token_here")
        print("ADMIN_ID=your_telegram_user_id_here")
        print("GEMINI_MODEL=gemini-2.5-flash")
        print("\n–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞:")
        print("cp docker.env.example .env")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    try:
        with open(env_path, 'r', encoding='utf-8') as f:
            env_content = f.read()
        
        required_vars = ['GEMINI_API_KEY', 'TG_BOT_TOKEN']
        missing_vars = []
        
        for var in required_vars:
            if f"{var}=" not in env_content or f"{var}=your_" in env_content:
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ùå –í —Ñ–∞–π–ª–µ .env –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            print("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä–æ–≤")
            return False
        
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ .env: {e}")
        return False

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_path = Path("data/reports_backup.sqlite")
    
    if not db_path.exists():
        print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...")
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            init_script = Path("migrations/init_users.py")
            if init_script.exists():
                subprocess.run([sys.executable, str(init_script)], check=True)
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                print("‚ùå –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python migrations/init_users.py")
            return False
    else:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
        try:
            import sqlite3
            conn = sqlite3.connect(str(db_path))
            cursor = conn.cursor()
            
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = [row[0] for row in cursor.fetchall()]
            
            expected_tables = ['users', 'groups', 'user_responses']
            missing_tables = set(expected_tables) - set(tables)
            
            if missing_tables:
                print(f"‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
                print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏:")
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
                if 'groups' in missing_tables:
                    print("   python migrations/add_groups_system.py")
                if 'user_responses' in missing_tables:
                    print("   python migrations/add_user_responses_table.py")
                
                conn.close()
                
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏
                response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø—É—Å–∫ –±–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–π? (y/n): ")
                if response.lower() not in ['y', 'yes', '–¥–∞']:
                    return False
            else:
                print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î: {e}")
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫...")
    
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        import streamlit
        import uvicorn
        import fastapi
        import telebot
        import google.generativeai
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False

def run_process(cmd, name):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    return subprocess.Popen(cmd, stdout=sys.stdout, stderr=sys.stderr, text=True, bufsize=1)

def main():
    print("ü§ñ AI Daily Tasks - –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    if not check_env_file():
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–æ—à–ª–∞")
        return 1
    
    if not check_dependencies():
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –ø—Ä–æ—à–ª–∞")
        return 1
    
    if not check_database():
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–æ—à–ª–∞")
        return 1
    
    print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!\n")
    
    try:
        print("üéõÔ∏è –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ (Streamlit)...")
        admin_proc = run_process([
            sys.executable,
            '-m', 'streamlit', 'run', 'admin_panel/dashboard.py',
            '--server.address', '0.0.0.0',
            '--server.port', '8501',
            '--server.headless', 'true'
        ], 'admin_panel')
        processes.append(admin_proc)

        time.sleep(3)  # –î–∞–µ–º –∞–¥–º–∏–Ω–∫–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞–Ω—É—Ç—å

        print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (API + –±–æ—Ç + –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)...")
        main_proc = run_process([
            sys.executable, '-m', 'uvicorn', 'app.main:app', 
            '--host', '0.0.0.0', '--port', '8000'
        ], 'main_app')
        processes.append(main_proc)

        print("\n" + "="*60)
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ AI Daily Tasks –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("="*60)
        print("üåê –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:      http://localhost:8501")
        print("üåê API —Å–µ—Ä–≤–µ—Ä:       http://localhost:8000")
        print("üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("ü§ñ Telegram –±–æ—Ç:     –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")
        print("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:      –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")
        print("="*60)
        print("üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã")
        print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("="*60)

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        while True:
            for p in processes:
                if p.poll() is not None:
                    print(f"\n‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {p.returncode}")
                    raise KeyboardInterrupt
            time.sleep(1)

    except KeyboardInterrupt:
        print("\n" + "="*40)
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        print("="*40)
        
        for i, p in enumerate(processes):
            if p.poll() is None:
                try:
                    print(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {i+1}...")
                    p.terminate()
                    # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è graceful shutdown
                    p.wait(timeout=5)
                    print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {i+1} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except subprocess.TimeoutExpired:
                    print(f"‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å {i+1}...")
                    p.kill()
                    print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {i+1} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {i+1}: {e}")
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        return 0
        
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 