# TODO-лист для проекта AI Daily Tasks
# Добавляйте, отмечайте и обновляйте задачи по мере выполнения

- История ответов пользователя добавить в админку
  - Описание: В админ-панели добавить раздел для просмотра истории ответов каждого пользователя.
  - Зависимости: Модель User в app/models/user.py, админ-панель в admin_panel/dashboard.py, база данных.
  - Подзадачи:
    1. Расширить модель БД: Создать таблицу user_responses (user_id, response_text, timestamp) в app/models/user.py и обновить миграцию в migrations/init_users.py.
    2. Добавить логику сохранения: В app/services/bot_service.py сохранять каждый ответ в новую таблицу.
    3. Обновить админку: В admin_panel/dashboard.py добавить expander с историей ответов.
    4. Тестирование: Добавить эндпоинт в app/api/endpoints/users.py для получения истории.
  - Вызовы: Объем данных (решение: пагинация). Миграция без потери данных.
  - Приоритет: Высокий

- Добавить команду /change для пользователей бота, с целью поменять отправленное сообщение
  - Описание: Добавить команду /change для редактирования последнего плана.
  - Зависимости: Обработчики в app/core/telegram_bot.py, bot_service.py, модель User.
  - Подзадачи:
    1. Добавить handler: В app/core/telegram_bot.py добавить обработчик для /change.
    2. Реализовать редактирование: В app/services/bot_service.py обновлять last_response.
    3. Интеграция с БД: Проверить has_responded_today.
    4. Тестирование: Обработать случаи без сообщений.
  - Вызовы: Ограничение времени (решение: проверка таймера в scheduler.py).
  - Приоритет: Средний

- Добавить возможность добавления команд(разных групп пользователей, которые присоединяются к боту по ссылке) и назначение админов на каждую команду
  - Описание: Поддержка нескольких групп с отдельными админами и ссылками.
  - Зависимости: Модель User, telegram_bot.py, dashboard.py, users.py.
  - Подзадачи:
    1. Расширить БД: Таблица groups (id, name, admin_id, token), добавить group_id в User.
    2. Генерация ссылок: В telegram_bot.py генерировать токены для групп.
    3. Управление в админке: Добавить вкладку "Группы" в dashboard.py.
    4. Фильтрация: Обновить рассылку в scheduler.py и сводки.
    5. Тестирование: Админы видят только свои группы.
  - Вызовы: Масштабируемость (решение: индексация). Безопасность (решение: аутентификация).
  - Приоритет: Высокий

- Добавить возможность редактирования времени отправки сообщения в админке
  - Описание: Настройка времени рассылки в админ-панели.
  - Зависимости: Scheduler.py, dashboard.py, config.py.
  - Подзадачи:
    1. Добавить настройку: В config.py или таблице settings хранить время.
    2. UI: В dashboard.py добавить форму в "Настройки".
    3. Обновление: В scheduler.py добавить перезапуск с новым cron.
    4. API: Эндпоинт в users.py для сохранения.
    5. Тестирование: Проверка применения изменений.
  - Вызовы: Синхронизация timezone (решение: pytz). Конфликты scheduler (решение: graceful restart).
  - Приоритет: Средний

- Сделать постобработку ответов, и если ответ был не конткретным(нечетким, неточным, абстрактным, коротким), то попросить пользователя переписать и отправить сообщение
  - Описание: Анализ качества ответа и запрос уточнения.
  - Зависимости: Bot_service.py, gemini_service.py, telegram_bot.py.
  - Подзадачи:
    1. Добавить анализ: В gemini_service.py функция оценки качества.
    2. Интеграция: В bot_service.py вызывать анализ после текста, просить уточнить если нужно.
    3. Логика: Добавить лимит попыток, обновлять last_response при успехе.
    4. Тестирование: Обработка коротких ответов.
  - Вызовы: Стоимость Gemini (решение: правила как fallback). Асинхронность (решение: async).
  - Приоритет: Высокий

# Общий план реализации:
# - Шаг 1: Начать с задач высокого приоритета (1, 3, 5).
# - Шаг 2: Использовать инструменты: codebase_search, read_file, edit_file.
# - Шаг 3: Тестирование через run_terminal_cmd.
# - Общие изменения: Обновить README.md, добавить миграции БД. 