import aiohttp
import logging
import traceback
import asyncio
from typing import Optional
from tenacity import retry, stop_after_attempt, wait_exponential
from app.config import settings

logger = logging.getLogger(__name__)

class GeminiService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini API.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–æ–≤, –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ—Ç—Ä–∞–∏ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
    
    Attributes:
        api_url: URL —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ Gemini API —Å –º–æ–¥–µ–ª—å—é –∏ –∫–ª—é—á–æ–º.
    
    Examples:
        >>> gemini = GeminiService()
        >>> response = gemini.generate_text("Hello")
    """
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å Gemini.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Gemini API —Å —É—á–µ—Ç–æ–º –º–æ–¥–µ–ª–∏ –∏ –∫–ª—é—á–∞
        2. –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        
        Args:
            –ù–µ—Ç
        
        Returns:
            None
        
        Examples:
            >>> service = GeminiService()
        """
        logger.debug(f"Initializing GeminiService with model: {settings.GEMINI_MODEL}")
        self.api_url = f"https://generativelanguage.googleapis.com/v1/models/{settings.GEMINI_MODEL}:generateContent?key={settings.GEMINI_API_KEY}"

    def _post_process_text(self, text: str) -> str:
        """–ü–æ—Å—Ç–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Gemini API.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        2. –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã '*' (–∑–≤–µ–∑–¥–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–ª—è markdown)
        3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        
        Args:
            text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç Gemini
        
        Returns:
            str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∑–≤–µ–∑–¥–æ—á–µ–∫
        
        Examples:
            >>> _post_process_text('**Hello**')
            'Hello'
        """
        if not text:
            return text
        cleaned_text = text.replace('*', '')
        return cleaned_text

    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=2, max=10))
    async def generate_text_async(self, prompt: str) -> Optional[str]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ Gemini –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –§–æ—Ä–º–∏—Ä—É–µ—Ç payload –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ Gemini API
        3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç
        4. –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫—É
        5. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        Args:
            prompt (str): –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
        Returns:
            Optional[str]: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        Raises:
            –ú–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è retry)
        
        Examples:
            >>> await service.generate_text_async('–ü—Ä–∏–≤–µ—Ç!')
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'
        """
        logger.debug(f"Sending to Gemini: {prompt[:50]}...")
        headers = {"Content-Type": "application/json"}
        payload = {"contents": [{"parts": [{"text": prompt}]}]}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.api_url,
                    json=payload,
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    data = await response.json()
                    logger.debug(f"Gemini raw response: {str(data)[:200]}")
                    if "candidates" in data and data["candidates"]:
                        text = data['candidates'][0]['content']['parts'][0]['text']
                        cleaned_text = self._post_process_text(text)
                        logger.debug(f"Gemini response text (cleaned): {cleaned_text[:100]}...")
                        return cleaned_text
                    logger.warning(f"Unexpected Gemini response: {data}")
                    return None
        except Exception as e:
            logger.error(f"Gemini API error: {e}\n{traceback.format_exc()}")
            return None

    async def analyze_response_quality_async(self, response_text: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Gemini AI.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ Gemini
        3. –ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–æ–π
        4. –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç
        
        Args:
            response_text (str): –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Returns:
            dict: {
                "is_acceptable": bool,  # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç
                "feedback": str,        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                "reason": str           # –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω)
            }
        
        Examples:
            >>> await service.analyze_response_quality_async('–†–∞–±–æ—Ç–∞—é')
            {'is_acceptable': False, 'feedback': '–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π...', 'reason': 'too_vague'}
        """
        if not response_text or len(response_text.strip()) < 5:
            return {
                "is_acceptable": False,
                "feedback": "ü§î –í–∞—à –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ, –Ω–∞–¥ –∫–∞–∫–∏–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å.",
                "reason": "too_short"
            }
        prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ä–∞–±–æ—á–∏—Ö –ø–ª–∞–Ω–∞—Ö –Ω–∞ –¥–µ–Ω—å.

–û—Ç–≤–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: "{response_text}"

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å (—É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏, –ø—Ä–æ–µ–∫—Ç—ã, –¥–µ–π—Å—Ç–≤–∏—è)
- –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ–Ω—è—Ç–Ω–æ, —á–µ–º –±—É–¥–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è)
- –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è (–Ω–µ –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)

–¢–†–ï–ë–£–ï–¢–°–Ø –¢–û–ß–ù–´–ô –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
ACCEPTABLE: –¥–∞/–Ω–µ—Ç
FEEDBACK: [–∫—Ä–∞—Ç–∫–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]
REASON: [–ø—Ä–∏—á–∏–Ω–∞, –µ—Å–ª–∏ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ: too_short/too_vague/not_specific/off_topic]

–ü—Ä–∏–º–µ—Ä—ã:

–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç: "–î–æ–¥–µ–ª—ã–≤–∞—é –º–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç–µ—Å—Ç–∏—Ä—É—é API –ø–ª–∞—Ç–µ–∂–µ–π, –≤—Å—Ç—Ä–µ—á–∞ —Å –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º –ø–æ –Ω–æ–≤–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"
ACCEPTABLE: –¥–∞
FEEDBACK: –û—Ç–ª–∏—á–Ω—ã–π –ø–ª–∞–Ω! –í—Å–µ –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –ø–æ–Ω—è—Ç–Ω—ã.
REASON: -

–ü–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç: "–†–∞–±–æ—Ç–∞—é"
ACCEPTABLE: –Ω–µ—Ç  
FEEDBACK: –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã.
REASON: too_vague

–ü–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç: "–¥–∞"
ACCEPTABLE: –Ω–µ—Ç
FEEDBACK: –°–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–ª–∞–Ω—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ.
REASON: too_short
"""
        try:
            analysis_result = await self.generate_text_async(prompt)
            if not analysis_result:
                return {
                    "is_acceptable": True,
                    "feedback": "‚úÖ –í–∞—à –ø–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç!",
                    "reason": "gemini_unavailable"
                }
            lines = analysis_result.strip().split('\n')
            acceptable = None
            feedback = ""
            reason = ""
            for line in lines:
                line = line.strip()
                if line.startswith('ACCEPTABLE:'):
                    acceptable_text = line.replace('ACCEPTABLE:', '').strip().lower()
                    acceptable = acceptable_text in ['–¥–∞', 'yes', 'true']
                elif line.startswith('FEEDBACK:'):
                    feedback = line.replace('FEEDBACK:', '').strip()
                elif line.startswith('REASON:'):
                    reason = line.replace('REASON:', '').strip()
            if acceptable is None:
                return {
                    "is_acceptable": True,
                    "feedback": "‚úÖ –í–∞—à –ø–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç!",
                    "reason": "parse_error"
                }
            return {
                "is_acceptable": acceptable,
                "feedback": feedback if feedback else ("‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –ø–ª–∞–Ω!" if acceptable else "ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –ø–ª–∞–Ω."),
                "reason": reason if not acceptable else ""
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                "is_acceptable": True,
                "feedback": "‚úÖ –í–∞—à –ø–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç!",
                "reason": "analysis_error"
            }

    def analyze_response_quality(self, response_text: str) -> dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Gemini AI.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ event loop
        2. –ü—Ä–∏ –æ—à–∏–±–∫–µ event loop ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ThreadPoolExecutor
        3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            response_text (str): –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (—Å–º. analyze_response_quality_async)
        
        Examples:
            >>> service.analyze_response_quality('–†–∞–±–æ—Ç–∞—é')
            {'is_acceptable': False, ...}
        """
        try:
            return asyncio.run(self.analyze_response_quality_async(response_text))
        except RuntimeError:
            import concurrent.futures
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(
                    asyncio.run, 
                    self.analyze_response_quality_async(response_text)
                )
                return future.result(timeout=30)

    def generate_text(self, prompt: str) -> Optional[str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ Gemini –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ event loop
        2. –ü—Ä–∏ –æ—à–∏–±–∫–µ event loop ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ThreadPoolExecutor
        3. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
        Args:
            prompt (str): –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
        Returns:
            Optional[str]: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        Examples:
            >>> service.generate_text('–ü—Ä–∏–≤–µ—Ç!')
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'
        """
        try:
            return asyncio.run(self.generate_text_async(prompt))
        except RuntimeError:
            import concurrent.futures
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(
                    asyncio.run, 
                    self.generate_text_async(prompt)
                )
                return future.result(timeout=60)