# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á (—É—Ç—Ä–µ–Ω–Ω–∏–π –∏ –≤–µ—á–µ—Ä–Ω–∏–π –æ–ø—Ä–æ—Å)
# ‚úÖ services/scheduler.py
import asyncio
import telebot
import logging
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
from app.config import settings
from app.core.database import SessionLocal
from app.models.user import User
from app.models.report import Report

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(settings.TG_BOT_TOKEN)
scheduler = BackgroundScheduler()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –ø–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
try:
    ADMIN_ID = int(settings.ADMIN_ID) if settings.ADMIN_ID else None
except (ValueError, TypeError):
    ADMIN_ID = None

# --- –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (telebot –Ω–µ —Ç—Ä–µ–±—É–µ—Ç async) ---
def send_morning_message():
    """–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    db = SessionLocal()
    try:
        users = db.query(User).filter(User.is_active == True).all()
        for user in users:
            try:
                bot.send_message(
                    chat_id=int(user.telegram_id), 
                    text="üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
    finally:
        db.close()

def send_evening_message():
    """–í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞"""
    db = SessionLocal()
    try:
        users = db.query(User).filter(User.is_active == True).all()
        for user in users:
            try:
                bot.send_message(
                    chat_id=int(user.telegram_id), 
                    text="üåô –í–µ—á–µ—Ä –¥–æ–±—Ä—ã–π! –ß—Ç–æ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å?"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
    finally:
        db.close()
    
    # –ü–æ—Å–ª–µ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω—É
    send_summary_to_admin()

# --- –í—ã–∂–∏–º–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def send_summary_to_admin():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if not ADMIN_ID:
        logger.warning("ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–≤–æ–¥–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return
        
    db = SessionLocal()
    try:
        today = datetime.today().date()
        users = db.query(User).filter(User.is_active == True).all()

        text = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {today}:\n\n"
        
        for user in users:
            morning_reports = db.query(Report).filter(
                Report.user_id == user.id,
                Report.type == "morning",
                Report.created_at >= datetime.combine(today, datetime.min.time())
            ).all()

            evening_reports = db.query(Report).filter(
                Report.user_id == user.id,
                Report.type == "evening",
                Report.created_at >= datetime.combine(today, datetime.min.time())
            ).all()

            text += f"üë§ {user.username or user.full_name}:\n"
            text += f"üåÖ –£—Ç—Ä–æ:\n"
            if morning_reports:
                text += "\n".join(f" - {r.content}" for r in morning_reports) + "\n"
            else:
                text += " - –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞\n"
                
            text += f"üåô –í–µ—á–µ—Ä:\n"
            if evening_reports:
                text += "\n".join(f" - {r.content}" for r in evening_reports) + "\n"
            else:
                text += " - –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞\n"
            text += "\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ (–ª–∏–º–∏—Ç Telegram ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(text) > 4000:
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                parts = text.split("üë§ ")
                header = parts[0]
                bot.send_message(chat_id=ADMIN_ID, text=header)
                
                for part in parts[1:]:
                    if part.strip():
                        bot.send_message(chat_id=ADMIN_ID, text=f"üë§ {part}")
            else:
                bot.send_message(chat_id=ADMIN_ID, text=text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
            
    finally:
        db.close()

# --- –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    try:
        # –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 9:00
        scheduler.add_job(
            send_morning_message, 
            'cron', 
            hour=9, 
            minute=0,
            id='morning_message'
        )
        
        # –í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 18:00
        scheduler.add_job(
            send_evening_message, 
            'cron', 
            hour=18, 
            minute=0,
            id='evening_message'
        )
        
        scheduler.start()
        logger.info("‚úÖ Scheduler started")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        if scheduler.running:
            scheduler.shutdown()
            logger.info("‚úÖ Scheduler stopped")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
