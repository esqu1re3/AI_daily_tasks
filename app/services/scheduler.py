# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤–µ—á–µ—Ä–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–≤–æ–¥–∫–∏ —á–µ—Ä–µ–∑ Gemini
import asyncio
import telebot
import logging
import threading
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from app.config import settings
from app.core.database import SessionLocal
from app.models.user import User
from app.models.user_response import UserResponse
from app.services.gemini_service import GeminiService

logger = logging.getLogger(__name__)

# Lazy initialization of services
bot = None
gemini_service = None
scheduler = None
ADMIN_ID = None

def _ensure_services_initialized():
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–µ–Ω–∏–≤—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram –±–æ—Ç–∞, Gemini —Å–µ—Ä–≤–∏—Å–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    –∑–∞–¥–∞—á. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.
    
    Raises:
        RuntimeError: –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
                     –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    
    Note:
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–º.
    """
    global bot, gemini_service, scheduler, ADMIN_ID
    
    if bot is None:
        if settings is None:
            raise RuntimeError("Settings not loaded. Ensure .env file exists with required variables.")
        
        bot = telebot.TeleBot(settings.TG_BOT_TOKEN)
        gemini_service = GeminiService()
        scheduler = BackgroundScheduler()
        
        # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            ADMIN_ID = int(settings.ADMIN_ID) if settings.ADMIN_ID else None
        except (ValueError, TypeError):
            ADMIN_ID = None
            logger.warning("ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

def send_morning_questions_to_group(group_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—á–µ—Ä–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã.
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    1. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è –≥—Ä—É–ø–ø—ã
    2. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –≥—Ä—É–ø–ø—ã
    4. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–∫–∏ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ 1 —á–∞—Å
    
    Args:
        group_id (int): ID –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    
    Note:
        –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã.
        –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã.
    
    Examples:
        >>> # –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
        >>> send_morning_questions_to_group(1)
    """
    _ensure_services_initialized()
    db = SessionLocal()
    try:
        from app.models.group import Group
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = db.query(Group).filter(Group.id == group_id, Group.is_active == True).first()
        if not group:
            logger.warning(f"–ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        db.query(User).filter(User.group_id == group_id).update({
            User.has_responded_today: False,
            User.last_response: None,
            User.response_retry_count: 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
        })
        db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
        active_users = db.query(User).filter(
            User.group_id == group_id,
            User.is_active == True,
            User.is_verified == True,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            User.is_group_member == True  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ
        ).all()
        
        if not active_users:
            logger.info(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ '{group.name}' (ID: {group_id}) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        question = "üåÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è! –ú–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∏ –∫–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –ö–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∏?"
        
        success_count = 0
        for user in active_users:
            try:
                bot.send_message(
                    chat_id=int(user.user_id),
                    text=question
                )
                success_count += 1
                username_display = f"@{user.username}" if user.username else f"ID:{user.user_id}"
                logger.info(f"–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫—É –≥—Ä—É–ø–ø—ã '{group.name}': {username_display}")
            except Exception as e:
                username_display = f"@{user.username}" if user.username else f"ID:{user.user_id}"
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É –≥—Ä—É–ø–ø—ã '{group.name}' {username_display}: {e}")
        
        logger.info(f"–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {success_count}/{len(active_users)}")
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã —Ä–æ–≤–Ω–æ —á–µ—Ä–µ–∑ 1 —á–∞—Å
        summary_time = datetime.now() + timedelta(hours=1)
        scheduler.add_job(
            generate_summary_after_timeout_for_group,
            'date',
            run_date=summary_time,
            id=f'summary_group_{group_id}_after_1hour'
        )
        
        logger.info(f"–°–≤–æ–¥–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.name}' –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ {summary_time.strftime('%H:%M:%S')} (—á–µ—Ä–µ–∑ 1 —á–∞—Å)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
    finally:
        db.close()

def send_morning_questions():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—á–µ—Ä–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º (legacy-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
    
    –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–ª—è –Ω–∏—Ö —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –¥–ª—è –≥—Ä—É–ø–ø –±–µ–∑ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    _ensure_services_initialized()
    db = SessionLocal()
    try:
        from app.models.group import Group
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        active_groups = db.query(Group).filter(Group.is_active == True).all()
        
        logger.info(f"–ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è {len(active_groups)} –≥—Ä—É–ø–ø")
        
        for group in active_groups:
            send_morning_questions_to_group(group.id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—â–µ–π —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
    finally:
        db.close()

def generate_summary_after_timeout_for_group(group_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤.
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≥—Ä—É–ø–ø–µ.
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    
    Args:
        group_id (int): ID –≥—Ä—É–ø–ø—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏.
    
    Note:
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ —á–µ—Ä–µ–∑ Gemini API.
    
    Examples:
        >>> # –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
        >>> generate_summary_after_timeout_for_group(1)
    """
    db = SessionLocal()
    try:
        from app.models.group import Group
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = db.query(Group).filter(Group.id == group_id, Group.is_active == True).first()
        if not group:
            logger.warning(f"–ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
        active_users = db.query(User).filter(
            User.group_id == group_id,
            User.is_active == True,
            User.is_verified == True,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            User.is_group_member == True  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ
        ).all()
        
        if not active_users:
            logger.info(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ '{group.name}' (ID: {group_id}) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª
        responded_users = [user for user in active_users if user.has_responded_today]
        not_responded_users = [user for user in active_users if not user.has_responded_today]
        
        logger.info(f"–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.name}'. –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–æ–≤: {len(responded_users)}/{len(active_users)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–∏")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã —Å —Ç–µ–º —á—Ç–æ –µ—Å—Ç—å –í –û–¢–î–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï
        threading.Thread(
            target=generate_and_send_summary_for_group, 
            args=(group, active_users), 
            daemon=True
        ).start()
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.name}' –ø–æ —Ç–∞–π–º–∞—É—Ç—É –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id}: {e}")
    finally:
        db.close()

def generate_summary_after_timeout():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ (legacy-—Ñ—É–Ω–∫—Ü–∏—è).
    
    –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    """
    db = SessionLocal()
    try:
        from app.models.group import Group
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        active_groups = db.query(Group).filter(Group.is_active == True).all()
        
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–æ–∫ –¥–ª—è {len(active_groups)} –≥—Ä—É–ø–ø –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
        
        for group in active_groups:
            generate_summary_after_timeout_for_group(group.id)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–æ–∫ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {e}")
    finally:
        db.close()

def generate_and_send_summary_for_group(group, users):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–æ–≤ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Gemini AI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã.
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    1. –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    2. –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini API
    3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ Gemini AI
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã –≤ Telegram
    
    Args:
        group (Group): –û–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã.
        users (List[User]): –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–≤–æ–¥–∫—É.
    
    Note:
        –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
        –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Gemini —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç.
        –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞—é—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–∏.
    
    Examples:
        >>> from app.models.group import Group
        >>> from app.models.user import User
        >>> group = Group(...)
        >>> users = [user1, user2, user3]
        >>> generate_and_send_summary_for_group(group, users)
        # –°–≤–æ–¥–∫–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É –≥—Ä—É–ø–ø—ã
    """
    if not group.admin_username:
        logger.error(f"–£ –≥—Ä—É–ø–ø—ã '{group.name}' (ID: {group.id}) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω admin_username, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    db = SessionLocal()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –ø–æ username
        from app.models.user import User
        admin_user = db.query(User).filter(User.username == group.admin_username).first()
        if not admin_user or not admin_user.user_id:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username '{group.admin_username}' –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.name}' (ID: {group.id})")
            return
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        responses = []
        responded_users = []
        not_responded_users = []
        
        for user in users:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º full_name, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ username, –∏–Ω–∞—á–µ ID
            if user.full_name:
                user_display = user.full_name
            elif user.username:
                user_display = f"@{user.username}"
            else:
                user_display = f"ID:{user.user_id}"
                
            if user.has_responded_today and user.last_response:
                responses.append(f"{user_display}: {user.last_response}")
                responded_users.append(user_display)
            else:
                not_responded_users.append(user_display)
        
        if not responses and not not_responded_users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
        prompt = f"""
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Ä–∞–±–æ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

–û—Ç–≤–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:
{chr(10).join(responses) if responses else "–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–≤–æ–¥–∫–µ:
- –ö—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ
- –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
- –£–∫–∞–∂–∏ –∫—Ç–æ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª)
- –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ 70 —Å–ª–æ–≤
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
- –ù–ï —É–∫–∞–∑—ã–≤–∞–π –¥–∞—Ç—É –≤ –æ—Ç–≤–µ—Ç–µ
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.
–í –∫–æ–Ω—Ü–µ –æ—Ç—á–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–æ–≤: {f"–ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: {', '.join(not_responded_users)}" if not_responded_users else "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã"}.
"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ Gemini
        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ Gemini...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        try:
            summary = asyncio.run(gemini_service.generate_text_async(prompt))
        except RuntimeError:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å event loop, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±–µ—Ä—Ç–∫—É
            import concurrent.futures
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(
                    asyncio.run, 
                    gemini_service.generate_text_async(prompt)
                )
                summary = future.result(timeout=60)
        
        if not summary:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –µ—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            basic_summary = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ Gemini. –ë–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n\n"
            if responses:
                basic_summary += "\n".join(responses)
            else:
                basic_summary += "–ù–∏–∫—Ç–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
            
            if not_responded_users:
                basic_summary += f"\n\n–ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: {', '.join(not_responded_users)}"
            
            summary = basic_summary
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –≥—Ä—É–ø–ø—ã
        admin_message = f"üìä –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–æ–≤ –≥—Ä—É–ø–ø—ã '{group.name}'\n"
        admin_message += f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d/%m/%Y')}\n"
        admin_message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(users)}\n"
        admin_message += f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª–∏: {len(responded_users)}\n"
        admin_message += f"‚è≥ –ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: {len(not_responded_users)}\n\n"
        admin_message += summary
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≥—Ä—É–ø–ø—ã
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(admin_message) > 4000:
                parts = [admin_message[i:i+4000] for i in range(0, len(admin_message), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        bot.send_message(chat_id=int(admin_user.user_id), text=part)
                    else:
                        bot.send_message(chat_id=int(admin_user.user_id), text=f"(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i+1})\n{part}")
            else:
                bot.send_message(chat_id=int(admin_user.user_id), text=admin_message)
            
            admin_display_name = admin_user.full_name or f"@{group.admin_username}"
            logger.info(f"–°–≤–æ–¥–∫–∞ –≥—Ä—É–ø–ø—ã '{group.name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_display_name}")
            
        except Exception as e:
            admin_display_name = admin_user.full_name or f"@{group.admin_username}"
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –≥—Ä—É–ø–ø—ã '{group.name}' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_display_name}: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ –≥—Ä—É–ø–ø—ã '{group.name}': {e}")
    finally:
        db.close()

def generate_and_send_summary(users):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ Gemini AI (legacy-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
    
    –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º.
    
    Args:
        users (List[User]): –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–≤–æ–¥–∫—É.
    
    Examples:
        >>> users = [user1, user2, user3]
        >>> generate_and_send_summary(users)
        # –°–≤–æ–¥–∫–∏ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    """
    if not users:
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º
    from collections import defaultdict
    from app.models.group import Group
    
    db = SessionLocal()
    try:
        groups_users = defaultdict(list)
        
        for user in users:
            if user.group_id:
                groups_users[user.group_id].append(user)
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã - –¥–æ–±–∞–≤–ª—è–µ–º –∫ –≥—Ä—É–ø–ø–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_group = db.query(Group).filter(Group.is_active == True).first()
                if default_group:
                    groups_users[default_group.id].append(user)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
        for group_id, group_users in groups_users.items():
            group = db.query(Group).filter(Group.id == group_id).first()
            if group:
                generate_and_send_summary_for_group(group, group_users)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ legacy-—Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
    finally:
        db.close()

def process_user_response(user, response_text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–µ—á–µ—Ä–Ω–∏–π –≤–æ–ø—Ä–æ—Å.
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    1. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    2. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–∞ –≤ user_responses
    3. –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∏–º—è, username)
    4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ id, username, first_name, last_name.
        response_text (str): –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–µ—á–µ—Ä–Ω–∏–π –≤–æ–ø—Ä–æ—Å.
    
    Note:
        –ï—Å–ª–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏, —Å–≤–æ–¥–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–æ—Å—Ä–æ—á–Ω–æ.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 1 —á–∞—Å.
    
    Examples:
        >>> # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        >>> process_user_response(telegram_user, "–°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º X")
    """
    _ensure_services_initialized()
    db = SessionLocal()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ - –∏—â–µ–º –ø–æ user_id
        db_user = db.query(User).filter(User.user_id == str(user.id)).first()
        if db_user:
            db_user.has_responded_today = True
            db_user.last_response = response_text
            
            # –û–±–Ω–æ–≤–ª—è–µ–º username –∏ –ø–æ–ª–Ω–æ–µ –∏–º—è
            if user.username:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
                existing_user = db.query(User).filter(
                    User.username == user.username,
                    User.id != db_user.id
                ).first()
                if not existing_user:
                    db_user.username = user.username
            
            if user.first_name:
                full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                db_user.full_name = full_name
            
            # ===== –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–æ–≤ =====
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ user_responses –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            user_response = UserResponse(
                user_id=db_user.id,
                response_text=response_text,
                telegram_user_id=str(user.id),
                telegram_username=user.username,
                full_name=db_user.full_name
            )
            db.add(user_response)
            
            db.commit()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º full_name –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if db_user.full_name:
                user_display = db_user.full_name
            elif db_user.username:
                user_display = f"@{db_user.username}"
            else:
                user_display = f"ID:{db_user.user_id}"
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é (ID: {user_response.id})")
            
            # ===== –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–æ–π –∂–µ –≥—Ä—É–ø–ø—ã =====
            if db_user.group_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≠–¢–û–ô –ì–†–£–ü–ü–´ (–¥–æ—Å—Ä–æ—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
                from app.models.group import Group
                
                group = db.query(Group).filter(Group.id == db_user.group_id).first()
                if group:
                    active_users_in_group = db.query(User).filter(
                        User.group_id == db_user.group_id,
                        User.is_active == True,
                        User.is_verified == True,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
                        User.is_group_member == True  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ
                    ).all()
                    responded_users_in_group = [u for u in active_users_in_group if u.has_responded_today]
                    
                    if len(responded_users_in_group) == len(active_users_in_group) and len(active_users_in_group) > 0:
                        logger.info(f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã '{group.name}' –æ—Ç–≤–µ—Ç–∏–ª–∏ –¥–æ—Å—Ä–æ—á–Ω–æ ({len(responded_users_in_group)}/{len(active_users_in_group)}). –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.")
                        
                        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ 1 —á–∞—Å
                        try:
                            job_id = f'summary_group_{db_user.group_id}_after_1hour'
                            if scheduler.get_job(job_id):
                                scheduler.remove_job(job_id)
                                logger.info(f"–û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.name}' —á–µ—Ä–µ–∑ 1 —á–∞—Å")
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.name}': {e}")
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –í –û–¢–î–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï
                        threading.Thread(
                            target=generate_and_send_summary_for_group, 
                            args=(group, active_users_in_group), 
                            daemon=True
                        ).start()
                        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.name}' –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
                    else:
                        logger.info(f"–í –≥—Ä—É–ø–ø–µ '{group.name}' –æ—Ç–≤–µ—Ç–∏–ª–∏ {len(responded_users_in_group)}/{len(active_users_in_group)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–ª–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.")
                else:
                    logger.warning(f"–ì—Ä—É–ø–ø–∞ —Å ID {db_user.group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∏ –∫ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ")
            
        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.rollback()
    finally:
        db.close()

def send_repeat_questions():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –∞–¥–º–∏–Ω–∞.
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    1. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
    3. –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–Ω—è" –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.
    –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ {"success_count": int, "total_count": int, "errors": list}
    
    Examples:
        >>> result = send_repeat_questions()
        >>> print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {result['success_count']}/{result['total_count']} —Å–æ–æ–±—â–µ–Ω–∏–π")
    """
    _ensure_services_initialized()
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = db.query(User).filter(
            User.is_active == True,
            User.is_verified == True,
            User.is_group_member == True,
            User.has_responded_today == False
        ).all()
        
        if not active_users:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
            return {"success_count": 0, "total_count": 0, "errors": []}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        question = "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\nüåÖ –ú–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—á–µ—Ä–∞ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∏ –∫–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ö–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∏?\n\nüìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç—á–µ—Ç."
        
        success_count = 0
        errors = []
        
        for user in active_users:
            try:
                bot.send_message(
                    chat_id=int(user.user_id),
                    text=question
                )
                success_count += 1
                username_display = f"@{user.username}" if user.username else f"ID:{user.user_id}"
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username_display}")
            except Exception as e:
                username_display = f"@{user.username}" if user.username else f"ID:{user.user_id}"
                error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username_display}: {e}"
                logger.error(error_msg)
                errors.append(error_msg)
        
        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {success_count}/{len(active_users)}")
        
        return {
            "success_count": success_count,
            "total_count": len(active_users),
            "errors": errors
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        return {"success_count": 0, "total_count": 0, "errors": [str(e)]}
    finally:
        db.close()

def send_test_message(user_id: str, message: str = "üîî –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    Args:
        user_id (str): Telegram User ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ {"success": bool, "error": str|None}
    
    Examples:
        >>> result = send_test_message("123456789", "–ü—Ä–∏–≤–µ—Ç!")
        >>> if result["success"]:
        ...     print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        ... else:
        ...     print(f"–û—à–∏–±–∫–∞: {result['error']}")
    """
    _ensure_services_initialized()
    try:
        bot.send_message(chat_id=int(user_id), text=message)
        logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return {"success": True, "error": None}
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
        logger.error(error_msg)
        return {"success": False, "error": str(e)}

def start_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ–ø—Ä–æ—Å–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º.
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    2. –£–¥–∞–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
    3. –°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã
    4. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    
    Note:
        –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ –∏–º–µ–µ—Ç —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (morning_hour, morning_minute, timezone).
        –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫.
    
    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    
    Examples:
        >>> start_scheduler()
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω, –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —Å–æ–∑–¥–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    """
    _ensure_services_initialized()
    try:
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≥—Ä—É–ø–ø...")
        
        from app.models.group import Group
        db = SessionLocal()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            active_groups = db.query(Group).filter(Group.is_active == True).all()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(active_groups)}")
            
            # –í–°–ï–ì–î–ê —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            existing_jobs = scheduler.get_jobs()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á: {len(existing_jobs)}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ (–∫–∞–∫ legacy, —Ç–∞–∫ –∏ group-based)
            for job in existing_jobs:
                if (job.id == 'morning_questions' or 
                    job.id.startswith('morning_group_') or 
                    job.id.startswith('summary_group_')):
                    scheduler.remove_job(job.id)
                    logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞: {job.id}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            created_jobs = 0
            for group in active_groups:
                try:
                    job_id = f'morning_group_{group.id}'
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
                    scheduler.add_job(
                        send_morning_questions_to_group,
                        'cron',
                        args=[group.id],
                        hour=group.morning_hour,
                        minute=group.morning_minute,
                        id=job_id,
                        timezone=group.timezone
                    )
                    
                    schedule_time = f"{group.morning_hour:02d}:{group.morning_minute:02d} {group.timezone}"
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.name}' (ID: {group.id}): {schedule_time}")
                    created_jobs += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group.name}' (ID: {group.id}): {e}")
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á —Ä–∞—Å—Å—ã–ª–∫–∏: {created_jobs}/{len(active_groups)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º legacy-–∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø)
            if len(active_groups) == 0:
                scheduler.add_job(
                    send_morning_questions,
                    'cron',
                    hour=9,
                    minute=30,
                    id='morning_questions_legacy',
                    timezone='Asia/Bishkek'
                )
                logger.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ legacy-–∑–∞–¥–∞—á–∞ (–Ω–µ—Ç –≥—Ä—É–ø–ø –≤ —Å–∏—Å—Ç–µ–º–µ)")
            
        finally:
            db.close()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if not scheduler.running:
            scheduler.start()
            logger.info("‚úÖ Scheduler –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏ –≥—Ä—É–ø–ø")
        else:
            logger.info("‚úÖ Scheduler —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        active_jobs = scheduler.get_jobs()
        logger.info(f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {len(active_jobs)}")
        for job in active_jobs:
            if hasattr(job, 'next_run_time') and job.next_run_time:
                logger.info(f"   - {job.id}: {job.next_run_time.strftime('%Y-%m-%d %H:%M:%S %Z')}")
            else:
                logger.info(f"   - {job.id}: (–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

def stop_scheduler():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.
    
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã.
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    
    Note:
        –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
        –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫.
    
    Examples:
        >>> stop_scheduler()
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–¥–∞—á–∏ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
    """
    _ensure_services_initialized()
    try:
        if scheduler.running:
            scheduler.shutdown()
            logger.info("‚úÖ Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

def get_scheduler_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    –∏ –≤—Ä–µ–º—è –∏—Ö —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ {
            "running": bool,
            "jobs_count": int,
            "jobs": list,
            "next_morning_questions": str|None
        }
    
    Examples:
        >>> info = get_scheduler_info()
        >>> print(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: {info['running']}")
        >>> print(f"–°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {info['next_morning_questions']}")
    """
    try:
        _ensure_services_initialized()
        
        if not scheduler:
            return {
                "running": False,
                "jobs_count": 0,
                "jobs": [],
                "next_morning_questions": None,
                "error": "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            }
        
        jobs = scheduler.get_jobs()
        jobs_info = []
        next_morning_questions = None
        
        for job in jobs:
            job_info = {
                "id": job.id,
                "name": str(job.func.__name__) if hasattr(job.func, '__name__') else str(job.func),
                "next_run_time": job.next_run_time.strftime('%Y-%m-%d %H:%M:%S %Z') if job.next_run_time else None,
                "trigger": str(job.trigger)
            }
            jobs_info.append(job_info)
            
            if job.id == 'morning_questions' and job.next_run_time:
                next_morning_questions = job.next_run_time.strftime('%Y-%m-%d %H:%M:%S %Z')
        
        return {
            "running": scheduler.running,
            "jobs_count": len(jobs),
            "jobs": jobs_info,
            "next_morning_questions": next_morning_questions,
            "error": None
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
        return {
            "running": False,
            "jobs_count": 0,
            "jobs": [],
            "next_morning_questions": None,
            "error": str(e)
        }

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
__all__ = ['start_scheduler', 'stop_scheduler', 'process_user_response', 'send_repeat_questions', 'send_test_message', 'get_scheduler_info']
