# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–≤–æ–¥–∫–∏ —á–µ—Ä–µ–∑ Gemini
import asyncio
import telebot
import logging
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from app.config import settings
from app.core.database import SessionLocal
from app.models.user import User
from app.services.gemini_service import GeminiService

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
bot = telebot.TeleBot(settings.TG_BOT_TOKEN)
gemini_service = GeminiService()
scheduler = BackgroundScheduler()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
try:
    ADMIN_ID = int(settings.ADMIN_ID) if settings.ADMIN_ID else None
except (ValueError, TypeError):
    ADMIN_ID = None
    logger.warning("ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

def send_morning_questions():
    """–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ 9:00 UTC+6"""
    db = SessionLocal()
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        db.query(User).update({
            User.has_responded_today: False,
            User.last_response: None
        })
        db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = db.query(User).filter(
            User.is_active == True
        ).all()
        
        if not active_users:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        question = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–µ—à–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
        
        success_count = 0
        for user in active_users:
            try:
                bot.send_message(
                    chat_id=int(user.user_id),
                    text=question
                )
                success_count += 1
                username_display = f"@{user.username}" if user.username else f"ID:{user.user_id}"
                logger.info(f"–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username_display}")
            except Exception as e:
                username_display = f"@{user.username}" if user.username else f"ID:{user.user_id}"
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username_display}: {e}")
        
        logger.info(f"–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {success_count}/{len(active_users)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        scheduler.add_job(
            check_responses_and_generate_summary,
            'date',
            run_date=datetime.now() + timedelta(hours=2),  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
            id='check_responses_first'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
    finally:
        db.close()

def check_responses_and_generate_summary():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –µ—Å–ª–∏ –≤—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = db.query(User).filter(
            User.is_active == True
        ).all()
        
        if not active_users:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª
        responded_users = [user for user in active_users if user.has_responded_today]
        not_responded_users = [user for user in active_users if not user.has_responded_today]
        
        logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–æ–≤: {len(responded_users)}/{len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–≤–µ—Ç–∏–ª–∏")
        
        if len(not_responded_users) == 0:
            # –í—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            logger.info("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É")
            generate_and_send_summary(active_users)
        else:
            # –ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ - –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            current_hour = datetime.now().hour
            
            if current_hour < 18:  # –î–æ 18:00 –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                next_check = datetime.now() + timedelta(hours=1)
                scheduler.add_job(
                    check_responses_and_generate_summary,
                    'date',
                    run_date=next_check,
                    id=f'check_responses_{next_check.strftime("%H%M")}'
                )
                logger.info(f"–ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç–∏–ª–∏, —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ {next_check.strftime('%H:%M')}")
            else:
                # –ü–æ—Å–ª–µ 18:00 –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Å —Ç–µ–º —á—Ç–æ –µ—Å—Ç—å
                logger.info("–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏")
                generate_and_send_summary(active_users)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
    finally:
        db.close()

def generate_and_send_summary(users):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —á–µ—Ä–µ–∑ Gemini –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É"""
    if not ADMIN_ID:
        logger.error("ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É")
        return
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        responses = []
        responded_users = []
        not_responded_users = []
        
        for user in users:
            username_display = f"@{user.username}" if user.username else f"ID:{user.user_id}"
            if user.has_responded_today and user.last_response:
                responses.append(f"{username_display}: {user.last_response}")
                responded_users.append(username_display)
            else:
                responses.append(f"{username_display}: –ù–µ –æ—Ç–≤–µ—Ç–∏–ª")
                not_responded_users.append(username_display)
        
        if not responses:
            logger.info("–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–≤–µ—Ç–æ–≤
        status_info = ""
        if not_responded_users:
            status_info = f"\n\n–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–æ–≤: {len(responded_users)} –∏–∑ {len(users)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–∏. –ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: {', '.join(not_responded_users)}"
        else:
            status_info = f"\n\n–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–æ–≤: –í—Å–µ {len(users)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
        prompt = f"""
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Ä–∞–±–æ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

–û—Ç–≤–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:
{chr(10).join(responses)}{status_info}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–≤–æ–¥–∫–µ:
- –ö—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ
- –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
- –£–∫–∞–∂–∏ –∫—Ç–æ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è
- –£–ø–æ–º—è–Ω–∏ –æ –Ω–µ–æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–≤–µ—Ç–æ–≤
- –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ –¥–æ 500 —Å–ª–æ–≤
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
- –ù–ï —É–∫–∞–∑—ã–≤–∞–π –¥–∞—Ç—É –≤ –æ—Ç–≤–µ—Ç–µ
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.
"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ Gemini
        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ Gemini...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        try:
            summary = asyncio.run(gemini_service.generate_text_async(prompt))
        except RuntimeError:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å event loop, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±–µ—Ä—Ç–∫—É
            import concurrent.futures
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(
                    asyncio.run, 
                    gemini_service.generate_text_async(prompt)
                )
                summary = future.result(timeout=60)
        
        if not summary:
            summary = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ Gemini. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n\n" + "\n".join(responses)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        final_message = f"üìä –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã\n"
        final_message += f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d/%m/%Y')}\n"
        final_message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(users)}\n\n"
        final_message += summary
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(final_message) > 4000:
                parts = [final_message[i:i+4000] for i in range(0, len(final_message), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        bot.send_message(chat_id=ADMIN_ID, text=part)
                    else:
                        bot.send_message(chat_id=ADMIN_ID, text=f"(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i+1})\n{part}")
            else:
                bot.send_message(chat_id=ADMIN_ID, text=final_message)
            
            logger.info("–°–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")

def process_user_response(user, response_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–∏–π –≤–æ–ø—Ä–æ—Å"""
    db = SessionLocal()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        db_user = db.query(User).filter(User.user_id == str(user.id)).first()
        if db_user:
            db_user.has_responded_today = True
            db_user.last_response = response_text
            
            # –û–±–Ω–æ–≤–ª—è–µ–º username –∏ –ø–æ–ª–Ω–æ–µ –∏–º—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if user.username and not db_user.username:
                db_user.username = user.username
            
            if not db_user.full_name and user.first_name:
                full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                db_user.full_name = full_name
            
            db.commit()
            username_display = f"@{db_user.username}" if db_user.username else f"ID:{db_user.user_id}"
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username_display}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            check_if_all_responded()
            
        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        db.close()

def check_if_all_responded():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏)"""
    db = SessionLocal()
    try:
        active_users = db.query(User).filter(
            User.is_active == True
        ).all()
        
        responded_users = [user for user in active_users if user.has_responded_today]
        
        if len(responded_users) == len(active_users) and len(active_users) > 0:
            logger.info("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –¥–æ—Å—Ä–æ—á–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É")
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            for job in scheduler.get_jobs():
                if job.id.startswith('check_responses'):
                    scheduler.remove_job(job.id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            generate_and_send_summary(active_users)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤: {e}")
    finally:
        db.close()

def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler.running:
            logger.info("Scheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
            return
            
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        existing_jobs = scheduler.get_jobs()
        for job in existing_jobs:
            if job.id == 'morning_questions':
                scheduler.remove_job(job.id)
                logger.info("–£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞ morning_questions")
        
        # –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 17:57 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ë–∏—à–∫–µ–∫ (UTC+6)
        scheduler.add_job(
            send_morning_questions,
            'cron',
            hour=19,  # 17:57 –ø–æ –ë–∏—à–∫–µ–∫—É
            minute=6,
            id='morning_questions',
            timezone='Asia/Bishkek'
        )
        
        if not scheduler.running:
            scheduler.start()
            logger.info("‚úÖ Scheduler –∑–∞–ø—É—â–µ–Ω (—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 17:57 Asia/Bishkek)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        if scheduler.running:
            scheduler.shutdown()
            logger.info("‚úÖ Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
__all__ = ['start_scheduler', 'stop_scheduler', 'process_user_response']
