# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–≤–æ–¥–∫–∏ —á–µ—Ä–µ–∑ Gemini
import asyncio
import telebot
import logging
import threading
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from app.config import get_settings
from app.core.database import SessionLocal
from app.models.user import User
from app.services.gemini_service import GeminiService

logger = logging.getLogger(__name__)

settings = get_settings()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
bot = telebot.TeleBot(settings.TG_BOT_TOKEN)
gemini_service = GeminiService()
scheduler = BackgroundScheduler()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
try:
    ADMIN_ID = int(settings.ADMIN_ID) if settings.ADMIN_ID else None
except (ValueError, TypeError):
    ADMIN_ID = None
    logger.warning("ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

def send_morning_questions():
    """–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ 9:30 UTC+6"""
    db = SessionLocal()
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        db.query(User).update({
            User.has_responded_today: False,
            User.last_response: None
        })
        db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_users = db.query(User).filter(
            User.is_active == True,
            User.is_verified == True,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            User.is_group_member == True  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ
        ).all()
        
        if not active_users:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
        
        question = "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ú–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—á–µ—Ä–∞ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∏ –∫–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ö–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∏?"
        
        success_count = 0
        for user in active_users:
            try:
                bot.send_message(
                    chat_id=int(user.user_id),
                    text=question
                )
                success_count += 1
                username_display = f"@{user.username}" if user.username else f"ID:{user.user_id}"
                logger.info(f"–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username_display}")
            except Exception as e:
                username_display = f"@{user.username}" if user.username else f"ID:{user.user_id}"
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username_display}: {e}")
        
        logger.info(f"–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {success_count}/{len(active_users)}")
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–≤–æ–¥–∫–∏ —Ä–æ–≤–Ω–æ —á–µ—Ä–µ–∑ 1 —á–∞—Å
        summary_time = datetime.now() + timedelta(hours=1)
        scheduler.add_job(
            generate_summary_after_timeout,
            'date',
            run_date=summary_time,
            id='summary_after_1hour'
        )
        
        logger.info(f"–°–≤–æ–¥–∫–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ {summary_time.strftime('%H:%M:%S')} (—á–µ—Ä–µ–∑ 1 —á–∞—Å)")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
    finally:
        db.close()

def generate_summary_after_timeout():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —á–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        active_users = db.query(User).filter(
            User.is_active == True,
            User.is_verified == True,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            User.is_group_member == True  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ
        ).all()
        
        if not active_users:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª
        responded_users = [user for user in active_users if user.has_responded_today]
        not_responded_users = [user for user in active_users if not user.has_responded_today]
        
        logger.info(f"–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–æ–≤: {len(responded_users)}/{len(active_users)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–≤–µ—Ç–∏–ª–∏")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —Å —Ç–µ–º —á—Ç–æ –µ—Å—Ç—å –í –û–¢–î–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï
        threading.Thread(
            target=generate_and_send_summary, 
            args=(active_users,), 
            daemon=True
        ).start()
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {e}")
    finally:
        db.close()

def generate_and_send_summary(users):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —á–µ—Ä–µ–∑ Gemini –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É"""
    if not ADMIN_ID:
        logger.error("ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É")
        return
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        responses = []
        responded_users = []
        not_responded_users = []
        
        for user in users:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º full_name, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ username, –∏–Ω–∞—á–µ ID
            if user.full_name:
                user_display = user.full_name
            elif user.username:
                user_display = f"@{user.username}"
            else:
                user_display = f"ID:{user.user_id}"
                
            if user.has_responded_today and user.last_response:
                responses.append(f"{user_display}: {user.last_response}")
                responded_users.append(user_display)
            else:
                not_responded_users.append(user_display)
        
        if not responses and not not_responded_users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
        prompt = f"""
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Ä–∞–±–æ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

–û—Ç–≤–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:
{chr(10).join(responses) if responses else "–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–≤–æ–¥–∫–µ:
- –ö—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ
- –í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
- –£–∫–∞–∂–∏ –∫—Ç–æ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª)
- –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ 70 —Å–ª–æ–≤
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
- –ù–ï —É–∫–∞–∑—ã–≤–∞–π –¥–∞—Ç—É –≤ –æ—Ç–≤–µ—Ç–µ
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.
–í –∫–æ–Ω—Ü–µ –æ—Ç—á–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–æ–≤: {f"–ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: {', '.join(not_responded_users)}" if not_responded_users else "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ–∏ –ø–ª–∞–Ω—ã"}.
"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ Gemini
        logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ Gemini...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        try:
            summary = asyncio.run(gemini_service.generate_text_async(prompt))
        except RuntimeError:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å event loop, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±–µ—Ä—Ç–∫—É
            import concurrent.futures
            with concurrent.futures.ThreadPoolExecutor() as executor:
                future = executor.submit(
                    asyncio.run, 
                    gemini_service.generate_text_async(prompt)
                )
                summary = future.result(timeout=60)
        
        if not summary:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç –µ—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            basic_summary = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ Gemini. –ë–∞–∑–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n\n"
            if responses:
                basic_summary += "\n".join(responses)
            else:
                basic_summary += "–ù–∏–∫—Ç–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
            
            if not_responded_users:
                basic_summary += f"\n\n–ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: {', '.join(not_responded_users)}"
            
            summary = basic_summary
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_message = f"üìä –£—Ç—Ä–µ–Ω–Ω—è—è —Å–≤–æ–¥–∫–∞ –ø–ª–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã\n"
        admin_message += f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d/%m/%Y')}\n"
        admin_message += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(users)}\n"
        admin_message += f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª–∏: {len(responded_users)}\n"
        admin_message += f"‚è≥ –ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏: {len(not_responded_users)}\n\n"
        admin_message += summary
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(admin_message) > 4000:
                parts = [admin_message[i:i+4000] for i in range(0, len(admin_message), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        bot.send_message(chat_id=ADMIN_ID, text=part)
                    else:
                        bot.send_message(chat_id=ADMIN_ID, text=f"(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i+1})\n{part}")
            else:
                bot.send_message(chat_id=ADMIN_ID, text=admin_message)
            
            logger.info("–°–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")

def process_user_response(user, response_text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–∏–π –≤–æ–ø—Ä–æ—Å"""
    db = SessionLocal()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ - –∏—â–µ–º –ø–æ user_id
        db_user = db.query(User).filter(User.user_id == str(user.id)).first()
        if db_user:
            db_user.has_responded_today = True
            db_user.last_response = response_text
            
            # –û–±–Ω–æ–≤–ª—è–µ–º username –∏ –ø–æ–ª–Ω–æ–µ –∏–º—è
            if user.username:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
                existing_user = db.query(User).filter(
                    User.username == user.username,
                    User.id != db_user.id
                ).first()
                if not existing_user:
                    db_user.username = user.username
            
            if user.first_name:
                full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                db_user.full_name = full_name
            
            db.commit()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º full_name –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if db_user.full_name:
                user_display = db_user.full_name
            elif db_user.username:
                user_display = f"@{db_user.username}"
            else:
                user_display = f"ID:{db_user.user_id}"
            
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã (–¥–æ—Å—Ä–æ—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
            active_users = db.query(User).filter(
                User.is_active == True,
                User.is_verified == True,  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
                User.is_group_member == True  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–º–∞–Ω–¥–µ
            ).all()
            responded_users = [u for u in active_users if u.has_responded_today]
            
            if len(responded_users) == len(active_users) and len(active_users) > 0:
                logger.info(f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –¥–æ—Å—Ä–æ—á–Ω–æ ({len(responded_users)}/{len(active_users)}). –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.")
                
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ 1 —á–∞—Å
                try:
                    if scheduler.get_job('summary_after_1hour'):
                        scheduler.remove_job('summary_after_1hour')
                        logger.info("–û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ —á–µ—Ä–µ–∑ 1 —á–∞—Å")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É: {e}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –í –û–¢–î–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï
                threading.Thread(
                    target=generate_and_send_summary, 
                    args=(active_users,), 
                    daemon=True
                ).start()
                logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
            else:
                logger.info(f"–û—Ç–≤–µ—Ç–∏–ª–∏ {len(responded_users)}/{len(active_users)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–ª–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.")
            
        else:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        db.close()

def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if scheduler.running:
            logger.info("Scheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
            return
            
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        existing_jobs = scheduler.get_jobs()
        for job in existing_jobs:
            if job.id == 'morning_questions':
                scheduler.remove_job(job.id)
                logger.info("–£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞ morning_questions")
        
        # –£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 9:30 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ë–∏—à–∫–µ–∫ (UTC+6)
        scheduler.add_job(
            send_morning_questions,
            'cron',
            hour=9,  # 9:30 –ø–æ –ë–∏—à–∫–µ–∫—É
            minute=30,
            id='morning_questions',
            timezone='Asia/Bishkek'
        )
        
        if not scheduler.running:
            scheduler.start()
            logger.info("‚úÖ Scheduler –∑–∞–ø—É—â–µ–Ω (—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 9:30 Asia/Bishkek, —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º)")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    try:
        if scheduler.running:
            scheduler.shutdown()
            logger.info("‚úÖ Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
__all__ = ['start_scheduler', 'stop_scheduler', 'process_user_response']
