import logging
import traceback
import asyncio
from datetime import datetime
from typing import Optional
from app.config import settings

logger = logging.getLogger(__name__)

class BotService:
    WORK_KEYWORDS = {
        '–∑–∞–¥–∞—á–∞', '–ø—Ä–æ–µ–∫—Ç', '–æ—Ç—á–µ—Ç', '–ø–ª–∞–Ω', '–≤—Å—Ç—Ä–µ—á–∞', '–¥–µ–¥–ª–∞–π–Ω', 'kpi',
        '—Ä–∞–±–æ—Ç–∞', '–∑–∞–¥–∞—á–∏', '–ø—Ä–æ–±–ª–µ–º–∞', '—Å—Ç–∞—Ç—É—Å', '–∏—Ç–æ–≥–∏', '–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ',
        '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–∫–æ–º–∞–Ω–¥–∞', '–∫–ª–∏–µ–Ω—Ç', '—Å—Ä–æ–∫', '–º–µ—Ç—Ä–∏–∫–∞', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç',
        '–æ–±—Å—É–¥–∏—Ç—å', '–≤–æ–ø—Ä–æ—Å', '–ø–æ–º–æ—â—å', '—Å–¥–µ–ª–∞–ª', '–¥–µ–ª–∞—é', '–ø–ª–∞–Ω', '—Ü–µ–ª—å',
        'kpi', 'okr', '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å', '–æ—Ç—á–∏—Ç–∞—Ç—å—Å—è', '–ø—Ä–æ–≥—Ä–µ—Å—Å', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'
    }
    BANNED_KEYWORDS = {
        '–∫–∞–∫–∞—Ç—å', '—Ç—É–∞–ª–µ—Ç', '–ª–∏—á–Ω–æ–µ', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '–¥–∏–µ—Ç–∞',
        '—Å–µ–∫—Å', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–ø–æ–ª–∏—Ç–∏–∫–∞', '—Ä–µ–ª–∏–≥–∏—è', '—Ñ–∏–ª—å–º', '–º—É–∑—ã–∫–∞',
        '–∏–≥—Ä–∞', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ', '–µ–¥–∞', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '—à—É—Ç–∫–∞', '–∞–Ω–µ–∫–¥–æ—Ç'
    }
    WORK_PATTERNS = [
        '—Ä–∞–±–æ—Ç', '–æ—Ç—á–µ—Ç', '–ø–æ–º–æ—â', '–ø–ª–∞–Ω–∏—Ä', '–¥–µ–ª–∞', '–≤—ã–ø–æ–ª–Ω', '—Å–¥–µ–ª–∞', '–ø—Ä–æ–≥—Ä–µ—Å—Å',
        '–∑–∞–¥–∞—á', '–ø—Ä–æ–µ–∫—Ç', '–≤—Å—Ç—Ä–µ—á', '–¥–µ–¥–ª–∞–π–Ω', '—Å—Ç–∞—Ç—É—Å', '–∏—Ç–æ–≥', '–∫–æ–º–∞–Ω–¥', '–∫–ª–∏–µ–Ω—Ç',
        '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–æ–±–Ω–æ–≤–ª', '–æ—Ç—á–∏—Ç', 'kpi', 'okr', '—Å–æ–±–∏—Ä–∞—é—Å—å', '–æ–ø—Ç–∏–º–∏–∑–∏—Ä', '–ø–æ–º–æ—á—å'
    ]

    def __init__(self, gemini_service):
        self.gemini_service = gemini_service
        logger.debug("BotService initialized")

    def is_work_related(self, text: Optional[str]) -> bool:
        if not text:
            return False
        text_lower = text.lower()
        if any(banned in text_lower for banned in self.BANNED_KEYWORDS):
            return False
        # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —á–∞—Å—Ç—è–º —Å–ª–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
        return any(work in text_lower for work in self.WORK_PATTERNS)

    def handle_user_message_sync(self, message, bot):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è telebot"""
        try:
            user_id = message.from_user.id
            text = message.text
            
            logger.info(f"Processing message from user {user_id}: {text[:50]}...")
            
            if not self.is_work_related(text):
                logger.warning(f"Non-work related message from user {user_id}: {text[:50]}...")
                bot.reply_to(
                    message,
                    "üö´ –Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–∞–±–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã!\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
                    "- –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?\n"
                    "- –ö–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –ø–æ –ø—Ä–æ–µ–∫—Ç—É X?\n"
                    "- –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∑–∞–¥–∞—á–µ–π Y\n"
                    "- –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ"
                )
                return

            # –ï—Å–ª–∏ –ø–∏—à–µ—Ç –Ω–µ –∞–¥–º–∏–Ω, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            admin_id = None
            try:
                admin_id = int(settings.ADMIN_ID)
            except Exception as e:
                logger.error(f"ADMIN_ID is not set or invalid: {e}")
            
            if admin_id and user_id and int(user_id) != admin_id:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
                user = message.from_user
                user_name = user.username or "(–±–µ–∑ username)"
                first_name = user.first_name or ''
                last_name = user.last_name or ''
                full_name = f"{first_name} {last_name}".strip()
                if not full_name:
                    full_name = first_name or "Unknown"
                
                plan_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} ({full_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞–±–æ—á–∏–π –ø–ª–∞–Ω/—Å–æ–æ–±—â–µ–Ω–∏–µ:\n{text}\n"
                
                try:
                    bot.send_message(chat_id=admin_id, text=plan_text)
                    logger.info(f"Message forwarded to admin: user {user_id} -> admin {admin_id}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
            logger.info(f"Generating response for user {user_id}")
            response = self._generate_response_sync(text)
            
            if response:
                bot.reply_to(message, response[:4000])
                logger.info(f"Response sent to user {user_id}: {response[:50]}...")
            else:
                bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å")
                logger.warning(f"No response generated for user {user_id}")
                
        except Exception as e:
            logger.error(f"Error handling message: {e}", exc_info=True)
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    def _generate_response_sync(self, text: Optional[str]) -> Optional[str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        if not text:
            return None
        
        prompt = (
            "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä–∞–±–æ—á–∏–π –≤–æ–ø—Ä–æ—Å.\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {text}\n\n"
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω - —É—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª–∏. "
            "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –∫–∞—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö —Ç–µ–º."
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤ –Ω–æ–≤–æ–º event loop
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π event loop
            loop = asyncio.get_event_loop()
            if loop.is_running():
                # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞
                import concurrent.futures
                with concurrent.futures.ThreadPoolExecutor() as executor:
                    future = executor.submit(
                        asyncio.run, 
                        self.gemini_service.generate_text_async(prompt)
                    )
                    return future.result(timeout=30)
            else:
                # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                return loop.run_until_complete(self.gemini_service.generate_text_async(prompt))
        except RuntimeError:
            # –ï—Å–ª–∏ –Ω–µ—Ç event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            return asyncio.run(self.gemini_service.generate_text_async(prompt))
        except Exception as e:
            logger.error(f"Error generating response: {e}")
            return "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å"

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def handle_user_message(self, update, context):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å telebot)"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        pass

    async def _generate_response(self, text: Optional[str]) -> Optional[str]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        if not text:
            return None
        
        prompt = (
            "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä–∞–±–æ—á–∏–π –≤–æ–ø—Ä–æ—Å.\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {text}\n\n"
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω - —É—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª–∏. "
            "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –∫–∞—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏—Ö —Ç–µ–º."
        )
        return await self.gemini_service.generate_text_async(prompt)