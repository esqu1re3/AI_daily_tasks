import logging
from datetime import datetime
from typing import Optional
from app.config import settings
from app.core.database import SessionLocal
from app.models.user import User

logger = logging.getLogger(__name__)

class BotService:
    def __init__(self, gemini_service):
        self.gemini_service = gemini_service
        logger.debug("BotService initialized")

    def handle_user_message_sync(self, message, bot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            user = message.from_user
            user_id = user.id
            text = message.text
            
            logger.info(f"Processing message from user @{user.username or user_id}: {text[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            db_user = self._get_or_register_user(user)
            
            if not db_user:
                bot.reply_to(
                    message,
                    "‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
                )
                return
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
            if not db_user.is_active:
                bot.reply_to(
                    message,
                    "‚è∏Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
            self._process_daily_plan(db_user, text, bot, message)
            
        except Exception as e:
            logger.error(f"Error handling message: {e}", exc_info=True)
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def _get_or_register_user(self, telegram_user):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        db = SessionLocal()
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            db_user = db.query(User).filter(User.telegram_id == str(telegram_user.id)).first()
            
            if db_user:
                return db_user
            
            # –ò—â–µ–º –ø–æ username
            username = telegram_user.username
            if username:
                db_user = db.query(User).filter(User.username == username).first()
                if db_user:
                    # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id
                    db_user.telegram_id = str(telegram_user.id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if not db_user.full_name:
                        full_name = f"{telegram_user.first_name or ''} {telegram_user.last_name or ''}".strip()
                        db_user.full_name = full_name or "Unknown"
                    
                    db.commit()
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –±–æ—Ç—É")
                    return db_user
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            return None
        finally:
            db.close()

    def _process_daily_plan(self, db_user, text, bot, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∞ –Ω–∞ –¥–µ–Ω—å"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.services.scheduler import process_user_response
            process_user_response(message.from_user, text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            bot.reply_to(
                message,
                f"‚úÖ –°–ø–∞—Å–∏–±–æ, @{db_user.username}! –í–∞—à –ø–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç.\n\n"
                "üìù –ö–æ–≥–¥–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç—è—Ç, "
                "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–æ–≤."
            )
            
            logger.info(f"–ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{db_user.username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text[:100]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞–Ω–∞: {e}")
            bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def is_work_related(self, text: Optional[str]) -> bool:
        """–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—á–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏"""
        return True

    async def handle_user_message(self, update, context):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        pass

    def _generate_response_sync(self, text: Optional[str]) -> Optional[str]:
        """–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ"""
        return None

    async def _generate_response(self, text: Optional[str]) -> Optional[str]:
        """–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ"""
        return None