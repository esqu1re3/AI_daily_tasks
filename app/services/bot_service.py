import logging
from datetime import datetime
from typing import Optional
from app.config import settings
from app.core.database import SessionLocal
from app.models.user import User

logger = logging.getLogger(__name__)

class BotService:
    def __init__(self, gemini_service):
        self.gemini_service = gemini_service
        logger.debug("BotService initialized")

    def handle_user_message_sync(self, message, bot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        db = SessionLocal()
        try:
            user = message.from_user
            user_id = user.id
            username = user.username
            text = message.text
            
            logger.info(f"Processing message from user @{username or user_id}: {text[:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /start —Å —Ç–æ–∫–µ–Ω–æ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            if text and text.startswith('/start'):
                self._handle_start_command(message, bot, db)
                return
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id (–µ—Å–ª–∏ —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω)
            db_user = db.query(User).filter(User.user_id == str(user.id)).first()
            
            if not db_user:
                bot.reply_to(
                    message,
                    "‚ùå –í—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                    f"–°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤–∞—à @username: @{username or '–Ω–µ_—É–∫–∞–∑–∞–Ω'}\n"
                    "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
            if not db_user.is_verified:
                bot.reply_to(
                    message,
                    "‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ —Å—Å—ã–ª–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            updated = False
            if user.username and db_user.username != user.username:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π username –Ω–µ –∑–∞–Ω—è—Ç
                existing_user = db.query(User).filter(
                    User.username == user.username, 
                    User.id != db_user.id
                ).first()
                if not existing_user:
                    db_user.username = user.username
                    updated = True
            
            if user.first_name:
                full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                if db_user.full_name != full_name:
                    db_user.full_name = full_name
                    updated = True
            
            if updated:
                db.commit()
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
            if not db_user.is_active:
                bot.reply_to(
                    message,
                    "‚è∏Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
            self._process_daily_plan(db_user, text, bot, message)
            
        except Exception as e:
            logger.error(f"Error handling message: {e}", exc_info=True)
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        finally:
            db.close()

    def _handle_start_command(self, message, bot, db):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
        user = message.from_user
        text = message.text
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start (–µ—Å–ª–∏ –µ—Å—Ç—å)
        parts = text.split(' ', 1)
        activation_token = parts[1] if len(parts) > 1 else None
        
        if activation_token:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            db_user = db.query(User).filter(User.activation_token == activation_token).first()
            
            if db_user and not db_user.is_verified:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self._activate_user_with_token(db_user, user, db, bot, message)
                return
            elif db_user and db_user.is_verified:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                bot.reply_to(
                    message,
                    "‚úÖ –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
                    "üåÖ –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00 —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –≤–∞—Å –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å.\n"
                    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏."
                )
                return
            else:
                # –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω
                bot.reply_to(
                    message,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–æ–π."
                )
                return
        
        # –ö–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = db.query(User).filter(User.user_id == str(user.id)).first()
        
        if db_user and db_user.is_verified:
            bot.reply_to(
                message,
                "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ —Å–±–æ—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–ª–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "üåÖ –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00 —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –≤–∞—Å –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å.\n\n"
                "üîπ –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –º–æ–∏ —É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏.\n\n"
                "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            )
        else:
            bot.reply_to(
                message,
                "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
                f"üìß –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤–∞—à @username: @{user.username or '–Ω–µ_—É–∫–∞–∑–∞–Ω'}\n\n"
                "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
            )

    def _activate_user_with_token(self, db_user, telegram_user, db, bot, message):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω"""
        try:
            # –°–≤—è–∑—ã–≤–∞–µ–º username —Å user_id –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
            db_user.user_id = str(telegram_user.id)
            db_user.is_verified = True
            
            # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            db_user.activation_token = None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if telegram_user.username and telegram_user.username != db_user.username:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ username
                existing_user = db.query(User).filter(
                    User.username == telegram_user.username,
                    User.id != db_user.id
                ).first()
                if not existing_user:
                    db_user.username = telegram_user.username
            
            if telegram_user.first_name:
                full_name = f"{telegram_user.first_name or ''} {telegram_user.last_name or ''}".strip()
                db_user.full_name = full_name
            
            db.commit()
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{db_user.username} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω")
            
            bot.reply_to(
                message,
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {db_user.full_name or f'@{db_user.username}'}!\n\n"
                "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                "üåÖ –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00 —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –≤–∞—Å –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å.\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏.\n\n"
                "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            db.rollback()
            bot.reply_to(
                message,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    def _verify_user(self, db_user, telegram_user, db):
        """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ username —Å user_id (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)"""
        try:
            db_user.user_id = str(telegram_user.id)
            db_user.is_verified = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if telegram_user.first_name:
                full_name = f"{telegram_user.first_name or ''} {telegram_user.last_name or ''}".strip()
                db_user.full_name = full_name
            
            db.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{db_user.username} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            db.rollback()
            raise

    def _process_daily_plan(self, db_user, text, bot, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∞ –Ω–∞ –¥–µ–Ω—å"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.services.scheduler import process_user_response
            process_user_response(message.from_user, text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º full_name –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if db_user.full_name:
                user_display = db_user.full_name
            elif db_user.username:
                user_display = f"@{db_user.username}"
            else:
                user_display = f"ID:{db_user.user_id}"
                
            bot.reply_to(
                message,
                f"‚úÖ –°–ø–∞—Å–∏–±–æ, {user_display}! –í–∞—à –ø–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç.\n\n"
                "üìù –ö–æ–≥–¥–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç—è—Ç, "
                "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–æ–≤."
            )
            
            logger.info(f"–ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text[:100]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞–Ω–∞: {e}")
            bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def is_work_related(self, text: Optional[str]) -> bool:
        """–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—á–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏"""
        return True

    async def handle_user_message(self, update, context):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        pass

    def _generate_response_sync(self, text: Optional[str]) -> Optional[str]:
        """–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ"""
        return None

    async def _generate_response(self, text: Optional[str]) -> Optional[str]:
        """–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ"""
        return None