import logging
from datetime import datetime
from typing import Optional
from app.config import settings
from app.core.database import SessionLocal
from app.models.group import Group
from app.models.user import User

logger = logging.getLogger(__name__)

class BotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–∫–∏ Telegram –±–æ—Ç–∞.
    
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö:
    –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–µ—á–µ—Ä–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Gemini AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã.
    
    Attributes:
        gemini_service: –≠–∫–∑–µ–º–ø–ª—è—Ä GeminiService –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI.
    
    Examples:
        >>> from app.services.gemini_service import GeminiService
        >>> gemini = GeminiService()
        >>> bot_service = BotService(gemini)
        >>> # –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    
    def __init__(self, gemini_service):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–∞.
        
        Args:
            gemini_service: –≠–∫–∑–µ–º–ø–ª—è—Ä GeminiService –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Å–≤–æ–¥–æ–∫.
        
        Examples:
            >>> gemini = GeminiService()
            >>> bot_service = BotService(gemini)
        """
        self.gemini_service = gemini_service
        logger.debug("BotService initialized")

    def handle_user_message_sync(self, message, bot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö.
        
        –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:
        - –ö–æ–º–∞–Ω–¥–∞ /start —Å —Ç–æ–∫–µ–Ω–æ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        - –ö–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        - –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–µ—á–µ—Ä–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram API —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ from_user, text, chat.
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.
        
        Note:
            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (chat.type == 'private').
            –í—Å–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        
        Examples:
            >>> # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            >>> bot_service.handle_user_message_sync(telegram_message, telegram_bot)
        """
        db = SessionLocal()
        try:
            user = message.from_user
            user_id = user.id
            username = user.username
            text = message.text
            chat_type = message.chat.type
            
            logger.info(f"Processing message from user @{username or user_id} in {chat_type}: {text[:50]}...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if chat_type != 'private':
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
            if text and text.startswith('/start'):
                self._handle_start_command(message, bot, db)
                return
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id (–µ—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)
            db_user = db.query(User).filter(User.user_id == str(user.id)).first()
            
            if not db_user:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è
                bot.reply_to(
                    message,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
                    f"üìß –í–∞—à @username: @{username or '–Ω–µ_—É–∫–∞–∑–∞–Ω'}\n"
                    f"üÜî –í–∞—à ID: {user_id}\n\n"
                    "–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å—Å—ã–ª–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            if not db_user.is_verified:
                bot.reply_to(
                    message,
                    "‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. "
                    "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–µ–º—É."
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            updated = False
            if user.username and user.username != db_user.username:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π username –Ω–µ –∑–∞–Ω—è—Ç
                existing_user = db.query(User).filter(
                    User.username == user.username, 
                    User.id != db_user.id
                ).first()
                if not existing_user:
                    db_user.username = user.username
                    updated = True
            
            if user.first_name:
                full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                if db_user.full_name != full_name:
                    db_user.full_name = full_name
                    updated = True
            
            if updated:
                db.commit()
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
            if not db_user.is_active:
                bot.reply_to(
                    message,
                    "‚è∏Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å
            self._process_daily_plan(db_user, text, bot, message)
            
        except Exception as e:
            logger.error(f"Error handling message: {e}", exc_info=True)
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        finally:
            db.close()

    def _handle_start_command(self, message, bot, db):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.
        
        –†–∞–∑–ª–∏—á–∞–µ—Ç –¥–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è:
        1. /start —Å —Ç–æ–∫–µ–Ω–æ–º - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. /start –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram —Å –∫–æ–º–∞–Ω–¥–æ–π /start.
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
        
        Examples:
            >>> # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
            >>> self._handle_start_command(start_message, bot, db_session)
        """
        user = message.from_user
        text = message.text
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start (–µ—Å–ª–∏ –µ—Å—Ç—å)
        parts = text.split(' ', 1)
        activation_token = parts[1] if len(parts) > 1 else None
        
        if activation_token:
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω (–Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
            self._activate_user_with_token(activation_token, user, db, bot, message)
            return
        
        # –ö–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = db.query(User).filter(User.user_id == str(user.id)).first()
        
        if db_user and db_user.is_verified:
            target_group = db.query(Group).filter(Group.id == db_user.group_id).first()
            schedule_time = f"{target_group.morning_hour:02d}:{target_group.morning_minute:02d}"
            bot.reply_to(
                message,
                f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {schedule_time} —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n" \
                "'üåÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è! –ú–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∏ –∫–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞. \n–ö–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∏?'\n\n"
                "–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏.\n\n"
                "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
            )
            return
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞
        if not db_user or not db_user.is_verified:
            if user.username:
                pending_user = db.query(User).filter(
                    User.username == user.username,
                    User.user_id.is_(None)
                ).first()
                
                if pending_user:
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∞ –±–µ–∑ user_id
                    pending_user.user_id = str(user.id)
                    pending_user.is_verified = True
                    pending_user.is_active = True
                    pending_user.is_group_member = False  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã
                    if user.first_name:
                        full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                        pending_user.full_name = full_name
                    db.commit()
                    db.refresh(pending_user)
                    db_user = pending_user
                    logger.info(f"Activated pending admin user @{user.username} with user_id {user.id}")
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
                    bot.reply_to(
                        message,
                        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{user.username}! "
                        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. "
                        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫–∏ –æ—Ç –≥—Ä—É–ø–ø, –≥–¥–µ –≤—ã –∞–¥–º–∏–Ω."
                    )
                    return
                
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ pending, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∞–¥–º–∏–Ω?)
            db_user = User(
                user_id=str(user.id),
                username=user.username,
                is_verified=True,
                is_active=True,
                is_group_member=False
            )
            if user.first_name:
                full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                db_user.full_name = full_name
            db.add(db_user)
            db.commit()
            db.refresh(db_user)
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.reply_to(
                message,
                "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! "
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
            )
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (fallback)
        bot.reply_to(
            message,
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            f"üìß –í–∞—à @username: @{user.username or '–Ω–µ_—É–∫–∞–∑–∞–Ω'}\n"
            f"üÜî –í–∞—à ID: {user.id}\n\n"
            "–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

    def _activate_user_with_token(self, activation_token, telegram_user, db, bot, message):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
        2. –ù–∞—Ö–æ–¥–∏—Ç –≥—Ä—É–ø–ø—É –ø–æ —Ç–æ–∫–µ–Ω—É
        3. –ò—â–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id –∏–ª–∏ username
        4. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        5. –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        6. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å
        
        Args:
            activation_token (str): –¢–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Å—ã–ª–∫–∏.
            telegram_user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ id, username, first_name, last_name.
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.
        
        Note:
            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã username –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
            –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            –û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
        
        Examples:
            >>> # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start LsKhcPQqknf2pagJZ03...
            >>> self._activate_user_with_token("LsKhcPQqknf2pagJZ03...", telegram_user, db, bot, message)
        """
        try:
            # ===== –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –ø–æ —Ç–æ–∫–µ–Ω—É =====
            from app.models.group import Group
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ - –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≥—Ä—É–ø–ø—É —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º
            target_group = db.query(Group).filter(
                Group.activation_token == activation_token,
                Group.is_active == True
            ).first()
            
            if not target_group:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º legacy —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if activation_token == "group_activation":
                    # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è legacy –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    target_group = db.query(Group).filter(Group.is_active == True).first()
                    
                    if not target_group:
                        bot.reply_to(
                            message,
                            "‚ùå –°–∏—Å—Ç–µ–º–∞ –≥—Ä—É–ø–ø –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n\n"
                            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã."
                        )
                        return
                else:
                    bot.reply_to(
                        message,
                        "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–µ–º—É."
                    )
                    return
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            existing_user_by_id = db.query(User).filter(User.user_id == str(telegram_user.id)).first()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            if existing_user_by_id and existing_user_by_id.is_verified:
                schedule_time = f"{target_group.morning_hour:02d}:{target_group.morning_minute:02d}"
                bot.reply_to(
                    message,
                    "‚úÖ –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
                    f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {schedule_time} —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n" \
                    "'üåÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è! –ú–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∏ –∫–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –ö–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∏?'\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ username –¥—Ä—É–≥–∏–º user_id
            existing_user_by_username = None
            if telegram_user.username:
                existing_user_by_username = db.query(User).filter(
                    User.username == telegram_user.username,
                    User.user_id != str(telegram_user.id)
                ).first()
            
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —ç—Ç–∏–º username –±–µ–∑ user_id (—Å–æ–∑–¥–∞–Ω–Ω–∞—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–¥–º–∏–Ω–∞)
            pending_user_by_username = None
            if not existing_user_by_id and telegram_user.username:
                pending_user_by_username = db.query(User).filter(
                    User.username == telegram_user.username,
                    User.user_id.is_(None)
                ).first()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            if existing_user_by_id:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
                db_user = existing_user_by_id
                db_user.is_verified = True
                db_user.activation_token = None
                db_user.group_id = target_group.id  # ===== –ù–ê–ó–ù–ê–ß–ê–ï–ú –í –ì–†–£–ü–ü–£ =====
                
                # –û–±–Ω–æ–≤–ª—è–µ–º username —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–Ω—è—Ç
                if telegram_user.username and not existing_user_by_username:
                    db_user.username = telegram_user.username
                    
            elif pending_user_by_username:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –±–µ–∑ user_id
                db_user = pending_user_by_username
                db_user.user_id = str(telegram_user.id)
                db_user.is_verified = True
                db_user.activation_token = None
                db_user.group_id = target_group.id
                db_user.is_group_member = False
                # –û–±–Ω–æ–≤–ª—è–µ–º full_name
                if telegram_user.first_name:
                    full_name = f"{telegram_user.first_name or ''} {telegram_user.last_name or ''}".strip()
                    db_user.full_name = full_name
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                # Username —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–Ω—è—Ç
                new_username = telegram_user.username if telegram_user.username and not existing_user_by_username else None
                
                db_user = User(
                    user_id=str(telegram_user.id),
                    username=new_username,
                    is_verified=True,
                    is_group_member=True,
                    activation_token=None,
                    group_id=target_group.id  # ===== –ù–ê–ó–ù–ê–ß–ê–ï–ú –í –ì–†–£–ü–ü–£ =====
                )
                db.add(db_user)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º full_name (–µ—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏ –≤—ã—à–µ)
            if telegram_user.first_name and not pending_user_by_username:  # –ò–∑–±–µ–≥–∞–µ–º –¥–≤–æ–π–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                full_name = f"{telegram_user.first_name or ''} {telegram_user.last_name or ''}".strip()
                db_user.full_name = full_name
            
            db.commit()
            
            user_display = db_user.full_name or f"@{db_user.username}" if db_user.username else f"ID:{db_user.user_id}"
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ '{target_group.name}' (ID: {target_group.id})")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ
            welcome_name = db_user.full_name or (f"@{db_user.username}" if db_user.username else "–∫–æ–ª–ª–µ–≥–∞")
            schedule_time = f"{target_group.morning_hour:02d}:{target_group.morning_minute:02d}"
            welcome_message = f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É '{target_group.name}', {welcome_name}!\n\n" \
                            "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n" \
                            f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {schedule_time} —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n" \
                            "'üåÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è! –ú–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ—à–∏—Ç—å –∏ –∫–∞–∫–æ–π –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞. –ö–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–Ω–∏–∫–ª–∏?'\n\n" \
                            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ —Ä–∞–±–æ—á–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏.\n\n" \
                            "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!"
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_display}")
            try:
                bot.reply_to(message, welcome_message)
                logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_display}")
            except Exception as msg_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_display}: {msg_error}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            db.rollback()
            bot.reply_to(
                message,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    def handle_change_command(self, message, bot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /change –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –æ—Ç–≤–µ—á–∞–ª.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram —Å –∫–æ–º–∞–Ω–¥–æ–π /change.
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤.
        
        Note:
            –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ editing_mode –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            –°–ª–µ–¥—É—é—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –Ω–æ–≤—ã–π –ø–ª–∞–Ω.
        
        Examples:
            >>> # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /change
            >>> self.handle_change_command(change_message, bot)
        """
        from app.core.database import SessionLocal
        
        db = SessionLocal()
        try:
            user = message.from_user
            user_id = user.id
            username = user.username
            
            logger.info(f"Processing /change command from user @{username or user_id}")
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
            db_user = db.query(User).filter(User.user_id == str(user.id)).first()
            
            if not db_user:
                bot.reply_to(
                    message,
                    "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                    "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
            if not db_user.is_verified:
                bot.reply_to(
                    message,
                    "‚ö†Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
                    "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
            if not db_user.is_active:
                bot.reply_to(
                    message,
                    "‚è∏Ô∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            if not db_user.has_responded_today or not db_user.last_response:
                bot.reply_to(
                    message,
                    "üìù –£ –≤–∞—Å –Ω–µ—Ç –ø–ª–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–ª–∞–Ω, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /change –¥–ª—è –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if db_user.full_name:
                user_display = db_user.full_name
            elif db_user.username:
                user_display = f"@{db_user.username}"
            else:
                user_display = f"ID:{db_user.user_id}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –∏ –ø—Ä–æ—Å–∏–º –Ω–æ–≤—ã–π
            current_plan_preview = db_user.last_response[:200] + "..." if len(db_user.last_response) > 200 else db_user.last_response
            
            change_message = (
                f"üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
                f"üìù **–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω:**\n"
                f"{current_plan_preview}\n\n"
                f"‚úèÔ∏è **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –∑–∞–º–µ–Ω—ã.**\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–º–µ–Ω–∏—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
            )
            
            bot.reply_to(message, change_message, parse_mode='Markdown')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥
            db_user.activation_token = "editing_mode"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ activation_token –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥
            db.commit()
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"Error handling change command: {e}", exc_info=True)
            bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")
        finally:
            db.close()

    def _process_daily_plan(self, db_user, text, bot, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–µ–Ω—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ Gemini.
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
        1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini AI
        2. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º - –ø—Ä–æ—Å–∏—Ç —É—Ç–æ—á–Ω–∏—Ç—å (–º–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏)
        3. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
        
        Args:
            db_user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–º–æ–¥–µ–ª—å User).
            text (str): –¢–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–µ–Ω—å.
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.
        
        Note:
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞.
            –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ db_user.response_retry_count.
            –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç, –∑–∞—Ç–µ–º –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π –æ—Ç–≤–µ—Ç.
        
        Examples:
            >>> # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            >>> self._process_daily_plan(user_from_db, "–†–∞–±–æ—Ç–∞—é", bot, message)
            # Gemini –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç —É—Ç–æ—á–Ω–∏—Ç—å
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if db_user.full_name:
                user_display = db_user.full_name
            elif db_user.username:
                user_display = f"@{db_user.username}"
            else:
                user_display = f"ID:{db_user.user_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            is_editing_mode = db_user.activation_token == "editing_mode"
            
            if is_editing_mode:
                # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–∞–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                old_plan = db_user.last_response
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω
                from app.services.scheduler import process_user_response
                process_user_response(message.from_user, text)
                
                # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                from app.core.database import SessionLocal
                db_edit = SessionLocal()
                try:
                    db_user_update = db_edit.query(type(db_user)).filter(type(db_user).id == db_user.id).first()
                    if db_user_update:
                        db_user_update.activation_token = None  # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        db_user_update.response_retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                        db_edit.commit()
                finally:
                    db_edit.close()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
                confirmation_message = (
                    f"‚úÖ {user_display}, –≤–∞—à –ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
                    "üìù –ù–æ–≤—ã–π –ø–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –≤ —Å–≤–æ–¥–∫—É –∫–æ–º–∞–Ω–¥—ã.\n"
                    "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."
                )
                
                bot.reply_to(message, confirmation_message)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                old_preview = old_plan[:50] + "..." if old_plan and len(old_plan) > 50 else old_plan
                new_preview = text[:50] + "..." if len(text) > 50 else text
                logger.info(f"–ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display} –∏–∑–º–µ–Ω–µ–Ω —Å '{old_preview}' –Ω–∞ '{new_preview}'")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª —Å–µ–≥–æ–¥–Ω—è –∏ —ç—Ç–æ –Ω–µ –ø–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç
            if db_user.has_responded_today and db_user.response_retry_count == 0:
                bot.reply_to(
                    message,
                    f"‚úÖ {user_display}, –≤—ã —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!\n\n"
                    "üìù –í–∞—à –æ—Ç–≤–µ—Ç —É–∂–µ —É—á—Ç–µ–Ω –≤ —Å–≤–æ–¥–∫–µ –∫–æ–º–∞–Ω–¥—ã.\n"
                    "üîÑ –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /change"
                )
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                from app.core.database import SessionLocal
                db = SessionLocal()
                try:
                    db_user_update = db.query(type(db_user)).filter(type(db_user).id == db_user.id).first()
                    if db_user_update:
                        db_user_update.response_retry_count += 1
                        db.commit()
                finally:
                    db.close()
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –ø–æ–ø—ã—Ç–æ–∫)
            if db_user.response_retry_count < 3:
                logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display} (–ø–æ–ø—ã—Ç–∫–∞ {db_user.response_retry_count + 1}/3)")
                
                try:
                    analysis = self.gemini_service.analyze_response_quality(text)
                    
                    if not analysis.get('is_acceptable', True):
                        # –û—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º - –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
                        from app.core.database import SessionLocal
                        db = SessionLocal()
                        try:
                            db_user_update = db.query(type(db_user)).filter(type(db_user).id == db_user.id).first()
                            if db_user_update:
                                db_user_update.response_retry_count += 1
                                db.commit()
                                
                                retry_count = db_user_update.response_retry_count
                                
                        finally:
                            db.close()
                        
                        feedback = analysis.get('feedback', 'ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–ª–∞–Ω –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.')
                        remaining_attempts = 3 - retry_count
                        
                        clarification_message = f"ü§î {feedback}\n\n"
                        if remaining_attempts > 0:
                            clarification_message += f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏, –ø—Ä–æ–µ–∫—Ç—ã –∏–ª–∏ —Ü–µ–ª–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
                            clarification_message += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}"
                        else:
                            clarification_message += "‚úÖ –°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ."
                        
                        bot.reply_to(message, clarification_message)
                        logger.info(f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display} –æ—Ç–∫–ª–æ–Ω–µ–Ω Gemini (–ø—Ä–∏—á–∏–Ω–∞: {analysis.get('reason', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}), –ø–æ–ø—ã—Ç–∫–∞ {retry_count}/3")
                        return
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display}: {e}, –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç")
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç
            
            # –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            from app.services.scheduler import process_user_response
            process_user_response(message.from_user, text)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            from app.core.database import SessionLocal
            db = SessionLocal()
            try:
                db_user_update = db.query(type(db_user)).filter(type(db_user).id == db_user.id).first()
                if db_user_update:
                    db_user_update.response_retry_count = 0
                    db.commit()
            finally:
                db.close()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if db_user.response_retry_count > 0:
                confirmation_message = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {user_display}! –¢–µ–ø–µ—Ä—å –≤–∞—à –ø–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç –∏ –ø–æ–Ω—è—Ç–µ–Ω.\n\n"
            else:
                confirmation_message = f"‚úÖ –°–ø–∞—Å–∏–±–æ, {user_display}! –í–∞—à –ø–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç.\n\n"
                
            confirmation_message += ("üìù –ö–æ–≥–¥–∞ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–≤–µ—Ç—è—Ç, "
                                   "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–ª–∞–Ω–æ–≤.")
            
            bot.reply_to(message, confirmation_message)
            
            logger.info(f"–ü–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display} –ø—Ä–∏–Ω—è—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text[:100]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞–Ω–∞: {e}")
            bot.reply_to(message, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def is_work_related(self, text: Optional[str]) -> bool:
        """–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—á–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏"""
        return True

    async def handle_user_message(self, update, context):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        pass

    def _generate_response_sync(self, text: Optional[str]) -> Optional[str]:
        """–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ"""
        return None

    async def _generate_response(self, text: Optional[str]) -> Optional[str]:
        """–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ"""
        return None