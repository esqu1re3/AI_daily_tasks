import logging
import time
import threading
from telebot import TeleBot, types
from telebot.handler_backends import ContinueHandling
from app.config import settings
from app.services.gemini_service import GeminiService
from app.services.bot_service import BotService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.bot = TeleBot(settings.TG_BOT_TOKEN, threaded=True)
        self.gemini_service = GeminiService()
        self.bot_service = BotService(self.gemini_service)
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            try:
                user = message.from_user
                chat_type = message.chat.type
                logger.info(f"Start command from user {user.id} (@{user.username}) in {chat_type}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if chat_type == 'private':
                    self.bot_service.handle_user_message_sync(message, self.bot)
                
            except Exception as e:
                logger.error(f"Error in start command: {e}")
                if message.chat.type == 'private':
                    self.bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

        @self.bot.message_handler(commands=['help'])
        def handle_help(message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
            try:
                chat_type = message.chat.type
                if chat_type == 'private':
                    help_text = (
                        "ü§ñ *–ë–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–ª–∞–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã*\n\n"
                        "üìã *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
                        "‚Ä¢ –°–±–æ—Ä –ø–ª–∞–Ω–æ–≤ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã\n"
                        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏\n"
                        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø—Ä–æ—Å—ã\n\n"
                        "üîó *–ö–∞–∫ –Ω–∞—á–∞—Ç—å:*\n"
                        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                        "2. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞\n"
                        "3. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
                        "‚è∞ *–í—Ä–µ–º—è –æ–ø—Ä–æ—Å–æ–≤:* 9:30 (UTC+6)\n"
                        "üìù *–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:* —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–ª–∞–Ω–∞–º–∏ –Ω–∞ –¥–µ–Ω—å"
                    )
                    self.bot.send_message(message.chat.id, help_text, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"Error in help command: {e}")

        @self.bot.message_handler(func=lambda message: True, content_types=['text'])
        def handle_text_message(message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if message.chat.type == 'private':
                    self.bot_service.handle_user_message_sync(message, self.bot)
            except Exception as e:
                logger.error(f"Error handling message: {e}")
                if message.chat.type == 'private':
                    self.bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("Starting Telegram bot in polling mode...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
            self.bot.infinity_polling(
                timeout=60,
                long_polling_timeout=60,
                none_stop=True,
                interval=1
            )
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
        except Exception as e:
            logger.error(f"Bot error: {e}")
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            time.sleep(5)
            self.run()
        finally:
            logger.info("Bot polling stopped")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            self.bot.stop_polling()
            logger.info("Bot stopped")
        except Exception as e:
            logger.error(f"Error stopping bot: {e}")

    def send_message(self, chat_id, text, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            return self.bot.send_message(chat_id, text, **kwargs)
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            return None
