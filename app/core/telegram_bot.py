import logging
import time
import threading
from telebot import TeleBot, types
from telebot.handler_backends import ContinueHandling
from app.config import settings
from app.services.gemini_service import GeminiService
from app.services.bot_service import BotService
from app.core.database import SessionLocal
from app.models.user import User

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.bot = TeleBot(settings.TG_BOT_TOKEN, threaded=True)
        self.gemini_service = GeminiService()
        self.bot_service = BotService(self.gemini_service)
        self._setup_handlers()

    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            try:
                user = message.from_user
                logger.info(f"Start command from user {user.id} (@{user.username})")
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                with SessionLocal() as db:
                    if not db.query(User).filter(User.telegram_id == str(user.id)).first():
                        new_user = User(
                            telegram_id=str(user.id),
                            username=user.username or "",
                            full_name=f"{user.first_name or ''} {user.last_name or ''}".strip()
                        )
                        db.add(new_user)
                        db.commit()
                        logger.info(f"New user registered: {user.id}")

                self.bot.reply_to(
                    message,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –∑–∞–¥–∞—á.\n\n"
                    "–Ø –ø–æ–º–æ–≥—É —Å –æ—Ç—á–µ—Ç–∞–º–∏, –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º."
                )
            except Exception as e:
                logger.error(f"Error in start command: {e}")
                self.bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

        @self.bot.message_handler(func=lambda message: True, content_types=['text'])
        def handle_text_message(message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ BotService
                self.bot_service.handle_user_message_sync(message, self.bot)
            except Exception as e:
                logger.error(f"Error handling message: {e}")
                self.bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("Starting Telegram bot in polling mode...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
            self.bot.infinity_polling(
                timeout=60,
                long_polling_timeout=60,
                none_stop=True,
                interval=1
            )
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
        except Exception as e:
            logger.error(f"Bot error: {e}")
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            time.sleep(5)
            self.run()
        finally:
            logger.info("Bot polling stopped")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            self.bot.stop_polling()
            logger.info("Bot stopped")
        except Exception as e:
            logger.error(f"Error stopping bot: {e}")

    def send_message(self, chat_id, text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            return self.bot.send_message(chat_id, text)
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            return None